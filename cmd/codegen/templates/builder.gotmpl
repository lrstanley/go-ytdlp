// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.

package ytdlp

{{- $imports := list }}
{{- range $group := .OptionGroups }}
{{- range $option := $group.Options }}
{{- if $option.Executable }}{{ $imports = mustAppend $imports "context" }}{{- end }}{{/* end if executable */}}
{{- if or (eq $option.Type "int") (eq $option.Type "float64") }}{{ $imports = mustAppend $imports "strconv" }}{{- end }}{{/* end if requires type conversion */}}
{{- end }}{{/* end range for options */}}
{{- end }}{{/* end range for option groups */}}

{{- if $imports }}
import (
{{- range $import := ($imports | uniq) }}
    {{ $import | quote }}
{{- end }}
)
{{- end }}{{/* end if imports */}}

{{/* variables modified during loops for state checks */}}
{{ $unsets := list }}

{{ range $group := .OptionGroups }}
{{ range $option := .Options }}
{{- if $option.Choices }}
// {{ $option.Name | to_camel }}Option are parameter types for [{{ $option.Name | to_camel }}].
type {{ $option.Name | to_camel }}Option {{ $option.Type }}

var (
{{- range $choice := $option.Choices }}
    {{ $option.Name | to_camel }}{{ $choice | to_camel }} {{ $option.Name | to_camel }}Option = {{ if eq $option.Type "string" }}{{ $choice | quote }}{{ else }}{{ $choice }}{{ end }}
{{- end }}
)
{{- end }}{{/* end if choices */}}

{{- if $option.Executable }}
{{ template "builder-help" $option }}
func (c *Command) {{ $option.Name | to_camel }}(ctx context.Context, {{ template "builder-meta-args" $option }}) (*Result, error) {
    c.addFlag(&Flag{
        ID: {{ $option.ID | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: {{ template "builder-slice-meta-args" $option }},
    })

    return c.runWithResult(ctx, c.buildCommand(ctx))
}
{{- else }}
{{ template "builder-help" $option }}
func (c *Command) {{ $option.Name | to_camel }}({{ template "builder-meta-args" $option }}) *Command {
    c.addFlag(&Flag{
        ID: {{ $option.ID | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: {{ template "builder-slice-meta-args" $option }},
    })
    return c
}

{{- $unsetID := ($option.Name | to_camel | trimPrefix "No" | trimPrefix "Yes") }}
{{- if not (has $unsetID $unsets) }}
{{- $unsets = mustAppend $unsets $unsetID }}

// Unset{{ $unsetID }} unsets any flags that were previously set by one of:
{{- range $coption := $group.Options }}
{{- if $coption.Executable }}{{ continue }}{{- end }}
{{- if eq $unsetID ($coption.Name | to_camel | trimPrefix "No" | trimPrefix "Yes") }}
//   - [Command.{{ $coption.Name | to_camel }}]
{{- end }}{{/* end if has suffix */}}
{{- end }}{{/* end range for options */}}
{{- if $option.Deprecated }}
//
// Deprecated: {{ $option.Deprecated }}
{{- end }}{{/* end if deprecated */}}
func (c *Command) Unset{{ $unsetID }}() *Command {
    c.removeFlagByID({{ $option.ID | quote }})
    return c
}
{{- end }}{{/* end if in $unsets */}}
{{- end }}{{/* end if type */}}
{{ end }}{{/* end range for options */}}
{{ end }}{{/* end range for option groups */}}
