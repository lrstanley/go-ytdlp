// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.

package ytdlp

import (
	"context"
	"strconv"
)

// Print program version and exit
//
// Additional information:
//   - Version maps to cli flags: --version.
//   - From option group: "General"
func (c *Command) Version(ctx context.Context) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "",
		Flag: "--version",
		Args: nil,
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// Check if updates are available. You cannot update when running from source code;
// Use git to pull the latest changes
//
// References:
//   - Update Notes: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#update
//
// Additional information:
//   - Update maps to cli flags: -U/--update.
//   - From option group: "General"
func (c *Command) Update(ctx context.Context) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--update",
		Args: nil,
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// Do not check for updates (default)
//
// Additional information:
//   - See [Command.UnsetUpdate], for unsetting the flag.
//   - NoUpdate maps to cli flags: --no-update.
//   - From option group: "General"
func (c *Command) NoUpdate() *Command {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--no-update",
		Args: nil,
	})
	return c
}

// UnsetUpdate unsets any flags that were previously set by one of:
//   - [Command.NoUpdate]
func (c *Command) UnsetUpdate() *Command {
	c.removeFlagByID("update_self")
	return c
}

// Upgrade/downgrade to a specific version. CHANNEL can be a repository as well.
// CHANNEL and TAG default to "stable" and "latest" respectively if omitted; See
// "UPDATE" for details. Supported channels: stable, nightly, master
//
// References:
//   - Update Notes: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#update
//
// Additional information:
//   - UpdateTo maps to cli flags: --update-to=[CHANNEL]@[TAG].
//   - From option group: "General"
func (c *Command) UpdateTo(ctx context.Context, value string) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--update-to",
		Args: []string{value},
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// Ignore download and postprocessing errors. The download will be considered
// successful even if the postprocessing fails
//
// Additional information:
//   - See [Command.UnsetIgnoreErrors], for unsetting the flag.
//   - IgnoreErrors maps to cli flags: -i/--ignore-errors.
//   - From option group: "General"
func (c *Command) IgnoreErrors() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--ignore-errors",
		Args: nil,
	})
	return c
}

// UnsetIgnoreErrors unsets any flags that were previously set by one of:
//   - [Command.IgnoreErrors]
func (c *Command) UnsetIgnoreErrors() *Command {
	c.removeFlagByID("ignoreerrors")
	return c
}

// Continue with next video on download errors; e.g. to skip unavailable videos in
// a playlist (default)
//
// Additional information:
//   - See [Command.UnsetAbortOnError], for unsetting the flag.
//   - NoAbortOnError maps to cli flags: --no-abort-on-error.
//   - From option group: "General"
func (c *Command) NoAbortOnError() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--no-abort-on-error",
		Args: nil,
	})
	return c
}

// UnsetAbortOnError unsets any flags that were previously set by one of:
//   - [Command.NoAbortOnError]
//   - [Command.AbortOnError]
func (c *Command) UnsetAbortOnError() *Command {
	c.removeFlagByID("ignoreerrors")
	return c
}

// Abort downloading of further videos if an error occurs
//
// Additional information:
//   - See [Command.UnsetAbortOnError], for unsetting the flag.
//   - AbortOnError maps to cli flags: --abort-on-error/--no-ignore-errors.
//   - From option group: "General"
func (c *Command) AbortOnError() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--abort-on-error",
		Args: nil,
	})
	return c
}

// Display the current user-agent and exit
//
// Additional information:
//   - DumpUserAgent maps to cli flags: --dump-user-agent.
//   - From option group: "General"
func (c *Command) DumpUserAgent(ctx context.Context) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "dump_user_agent",
		Flag: "--dump-user-agent",
		Args: nil,
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// List all supported extractors and exit
//
// Additional information:
//   - ListExtractors maps to cli flags: --list-extractors.
//   - From option group: "General"
func (c *Command) ListExtractors(ctx context.Context) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "list_extractors",
		Flag: "--list-extractors",
		Args: nil,
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// Output descriptions of all supported extractors and exit
//
// Additional information:
//   - ExtractorDescriptions maps to cli flags: --extractor-descriptions.
//   - From option group: "General"
func (c *Command) ExtractorDescriptions(ctx context.Context) (*Result, error) {
	c.addFlag(&Flag{
		ID:   "list_extractor_descriptions",
		Flag: "--extractor-descriptions",
		Args: nil,
	})

	return c.runWithResult(c.buildCommand(ctx))
}

// Extractor names to use separated by commas. You can also use regexes, "all",
// "default" and "end" (end URL matching); e.g. --ies "holodex.*,end,youtube".
// Prefix the name with a "-" to exclude it, e.g. --ies default,-generic. Use
// --list-extractors for a list of extractor names.
//
// Additional information:
//   - See [Command.UnsetUseExtractors], for unsetting the flag.
//   - UseExtractors maps to cli flags: --use-extractors/--ies=NAMES.
//   - From option group: "General"
func (c *Command) UseExtractors(names string) *Command {
	c.addFlag(&Flag{
		ID:   "allowed_extractors",
		Flag: "--use-extractors",
		Args: []string{names},
	})
	return c
}

// UnsetUseExtractors unsets any flags that were previously set by one of:
//   - [Command.UseExtractors]
func (c *Command) UnsetUseExtractors() *Command {
	c.removeFlagByID("allowed_extractors")
	return c
}

// ForceGenericExtractor sets the "force-generic-extractor" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetForceGenericExtractor], for unsetting the flag.
//   - ForceGenericExtractor maps to cli flags: --force-generic-extractor (hidden).
//   - From option group: "General"
func (c *Command) ForceGenericExtractor() *Command {
	c.addFlag(&Flag{
		ID:   "force_generic_extractor",
		Flag: "--force-generic-extractor",
		Args: nil,
	})
	return c
}

// UnsetForceGenericExtractor unsets any flags that were previously set by one of:
//   - [Command.ForceGenericExtractor]
func (c *Command) UnsetForceGenericExtractor() *Command {
	c.removeFlagByID("force_generic_extractor")
	return c
}

// Use this prefix for unqualified URLs. E.g. "gvsearch2:python" downloads two
// videos from google videos for the search term "python". Use the value "auto" to
// let yt-dlp guess ("auto_warning" to emit a warning when guessing). "error" just
// throws an error. The default value "fixup_error" repairs broken URLs, but emits
// an error if this is not possible instead of searching
//
// Additional information:
//   - See [Command.UnsetDefaultSearch], for unsetting the flag.
//   - DefaultSearch maps to cli flags: --default-search=PREFIX.
//   - From option group: "General"
func (c *Command) DefaultSearch(prefix string) *Command {
	c.addFlag(&Flag{
		ID:   "default_search",
		Flag: "--default-search",
		Args: []string{prefix},
	})
	return c
}

// UnsetDefaultSearch unsets any flags that were previously set by one of:
//   - [Command.DefaultSearch]
func (c *Command) UnsetDefaultSearch() *Command {
	c.removeFlagByID("default_search")
	return c
}

// Don't load any more configuration files except those given to
// --config-locations. For backward compatibility, if this option is found inside
// the system configuration file, the user configuration is not loaded.
//
// Additional information:
//   - See [Command.UnsetIgnoreConfig], for unsetting the flag.
//   - IgnoreConfig maps to cli flags: --ignore-config/--no-config.
//   - From option group: "General"
func (c *Command) IgnoreConfig() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreconfig",
		Flag: "--ignore-config",
		Args: nil,
	})
	return c
}

// UnsetIgnoreConfig unsets any flags that were previously set by one of:
//   - [Command.IgnoreConfig]
func (c *Command) UnsetIgnoreConfig() *Command {
	c.removeFlagByID("ignoreconfig")
	return c
}

// Do not load any custom configuration files (default). When given inside a
// configuration file, ignore all previous --config-locations defined in the
// current file
//
// Additional information:
//   - See [Command.UnsetConfigLocations], for unsetting the flag.
//   - NoConfigLocations maps to cli flags: --no-config-locations.
//   - From option group: "General"
func (c *Command) NoConfigLocations() *Command {
	c.addFlag(&Flag{
		ID:   "config_locations",
		Flag: "--no-config-locations",
		Args: nil,
	})
	return c
}

// UnsetConfigLocations unsets any flags that were previously set by one of:
//   - [Command.NoConfigLocations]
//   - [Command.ConfigLocations]
func (c *Command) UnsetConfigLocations() *Command {
	c.removeFlagByID("config_locations")
	return c
}

// Location of the main configuration file; either the path to the config or its
// containing directory ("-" for stdin). Can be used multiple times and inside
// other configuration files
//
// Additional information:
//   - See [Command.UnsetConfigLocations], for unsetting the flag.
//   - ConfigLocations maps to cli flags: --config-locations=PATH.
//   - From option group: "General"
func (c *Command) ConfigLocations(path string) *Command {
	c.addFlag(&Flag{
		ID:   "config_locations",
		Flag: "--config-locations",
		Args: []string{path},
	})
	return c
}

// Do not extract the videos of a playlist, only list them
//
// Additional information:
//   - See [Command.UnsetFlatPlaylist], for unsetting the flag.
//   - FlatPlaylist maps to cli flags: --flat-playlist.
//   - From option group: "General"
func (c *Command) FlatPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "extract_flat",
		Flag: "--flat-playlist",
		Args: nil,
	})
	return c
}

// UnsetFlatPlaylist unsets any flags that were previously set by one of:
//   - [Command.FlatPlaylist]
//   - [Command.NoFlatPlaylist]
func (c *Command) UnsetFlatPlaylist() *Command {
	c.removeFlagByID("extract_flat")
	return c
}

// Fully extract the videos of a playlist (default)
//
// Additional information:
//   - See [Command.UnsetFlatPlaylist], for unsetting the flag.
//   - NoFlatPlaylist maps to cli flags: --no-flat-playlist.
//   - From option group: "General"
func (c *Command) NoFlatPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "extract_flat",
		Flag: "--no-flat-playlist",
		Args: nil,
	})
	return c
}

// Download livestreams from the start. Currently only supported for YouTube
// (Experimental)
//
// Additional information:
//   - See [Command.UnsetLiveFromStart], for unsetting the flag.
//   - LiveFromStart maps to cli flags: --live-from-start.
//   - From option group: "General"
func (c *Command) LiveFromStart() *Command {
	c.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--live-from-start",
		Args: nil,
	})
	return c
}

// UnsetLiveFromStart unsets any flags that were previously set by one of:
//   - [Command.LiveFromStart]
//   - [Command.NoLiveFromStart]
func (c *Command) UnsetLiveFromStart() *Command {
	c.removeFlagByID("live_from_start")
	return c
}

// Download livestreams from the current time (default)
//
// Additional information:
//   - See [Command.UnsetLiveFromStart], for unsetting the flag.
//   - NoLiveFromStart maps to cli flags: --no-live-from-start.
//   - From option group: "General"
func (c *Command) NoLiveFromStart() *Command {
	c.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--no-live-from-start",
		Args: nil,
	})
	return c
}

// Wait for scheduled streams to become available. Pass the minimum number of
// seconds (or range) to wait between retries
//
// Additional information:
//   - See [Command.UnsetWaitForVideo], for unsetting the flag.
//   - WaitForVideo maps to cli flags: --wait-for-video=MIN[-MAX].
//   - From option group: "General"
func (c *Command) WaitForVideo(min string) *Command {
	c.addFlag(&Flag{
		ID:   "wait_for_video",
		Flag: "--wait-for-video",
		Args: []string{min},
	})
	return c
}

// UnsetWaitForVideo unsets any flags that were previously set by one of:
//   - [Command.WaitForVideo]
//   - [Command.NoWaitForVideo]
func (c *Command) UnsetWaitForVideo() *Command {
	c.removeFlagByID("wait_for_video")
	return c
}

// Do not wait for scheduled streams (default)
//
// Additional information:
//   - See [Command.UnsetWaitForVideo], for unsetting the flag.
//   - NoWaitForVideo maps to cli flags: --no-wait-for-video.
//   - From option group: "General"
func (c *Command) NoWaitForVideo() *Command {
	c.addFlag(&Flag{
		ID:   "wait_for_video",
		Flag: "--no-wait-for-video",
		Args: nil,
	})
	return c
}

// Mark videos watched (even with --simulate)
//
// Additional information:
//   - See [Command.UnsetMarkWatched], for unsetting the flag.
//   - MarkWatched maps to cli flags: --mark-watched.
//   - From option group: "General"
func (c *Command) MarkWatched() *Command {
	c.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--mark-watched",
		Args: nil,
	})
	return c
}

// UnsetMarkWatched unsets any flags that were previously set by one of:
//   - [Command.MarkWatched]
//   - [Command.NoMarkWatched]
func (c *Command) UnsetMarkWatched() *Command {
	c.removeFlagByID("mark_watched")
	return c
}

// Do not mark videos watched (default)
//
// Additional information:
//   - See [Command.UnsetMarkWatched], for unsetting the flag.
//   - NoMarkWatched maps to cli flags: --no-mark-watched.
//   - From option group: "General"
func (c *Command) NoMarkWatched() *Command {
	c.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--no-mark-watched",
		Args: nil,
	})
	return c
}

// NoColors sets the "no-colors" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetColors], for unsetting the flag.
//   - NoColors maps to cli flags: --no-colors/--no-colours (hidden).
//   - From option group: "General"
func (c *Command) NoColors() *Command {
	c.addFlag(&Flag{
		ID:   "color",
		Flag: "--no-colors",
		Args: nil,
	})
	return c
}

// UnsetColors unsets any flags that were previously set by one of:
//   - [Command.NoColors]
func (c *Command) UnsetColors() *Command {
	c.removeFlagByID("color")
	return c
}

// Whether to emit color codes in output, optionally prefixed by the STREAM (stdout
// or stderr) to apply the setting to. Can be one of "always", "auto" (default),
// "never", or "no_color" (use non color terminal sequences). Use "auto-tty" or
// "no_color-tty" to decide based on terminal support only. Can be used multiple
// times
//
// Additional information:
//   - See [Command.UnsetColor], for unsetting the flag.
//   - Color maps to cli flags: --color=[STREAM:]POLICY.
//   - From option group: "General"
func (c *Command) Color(policy string) *Command {
	c.addFlag(&Flag{
		ID:   "color",
		Flag: "--color",
		Args: []string{policy},
	})
	return c
}

// UnsetColor unsets any flags that were previously set by one of:
//   - [Command.Color]
func (c *Command) UnsetColor() *Command {
	c.removeFlagByID("color")
	return c
}

// Options that can help keep compatibility with youtube-dl or youtube-dlc
// configurations by reverting some of the changes made in yt-dlp. See "Differences
// in default behavior" for details
//
// References:
//   - Compatibility Options: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#differences-in-default-behavior
//
// Additional information:
//   - See [Command.UnsetCompatOptions], for unsetting the flag.
//   - CompatOptions maps to cli flags: --compat-options=OPTS.
//   - From option group: "General"
func (c *Command) CompatOptions(opts string) *Command {
	c.addFlag(&Flag{
		ID:   "compat_opts",
		Flag: "--compat-options",
		Args: []string{opts},
	})
	return c
}

// UnsetCompatOptions unsets any flags that were previously set by one of:
//   - [Command.CompatOptions]
func (c *Command) UnsetCompatOptions() *Command {
	c.removeFlagByID("compat_opts")
	return c
}

// Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a
// proper scheme, e.g. socks5://user:pass@127.0.0.1:1080/. Pass in an empty string
// (--proxy "") for direct connection
//
// Additional information:
//   - See [Command.UnsetProxy], for unsetting the flag.
//   - Proxy maps to cli flags: --proxy=URL.
//   - From option group: "Network"
func (c *Command) Proxy(url string) *Command {
	c.addFlag(&Flag{
		ID:   "proxy",
		Flag: "--proxy",
		Args: []string{url},
	})
	return c
}

// UnsetProxy unsets any flags that were previously set by one of:
//   - [Command.Proxy]
func (c *Command) UnsetProxy() *Command {
	c.removeFlagByID("proxy")
	return c
}

// Time to wait before giving up, in seconds
//
// Additional information:
//   - See [Command.UnsetSocketTimeout], for unsetting the flag.
//   - SocketTimeout maps to cli flags: --socket-timeout=SECONDS.
//   - From option group: "Network"
func (c *Command) SocketTimeout(seconds float64) *Command {
	c.addFlag(&Flag{
		ID:   "socket_timeout",
		Flag: "--socket-timeout",
		Args: []string{
			strconv.FormatFloat(seconds, 'g', -1, 64),
		},
	})
	return c
}

// UnsetSocketTimeout unsets any flags that were previously set by one of:
//   - [Command.SocketTimeout]
func (c *Command) UnsetSocketTimeout() *Command {
	c.removeFlagByID("socket_timeout")
	return c
}

// Client-side IP address to bind to
//
// Additional information:
//   - See [Command.UnsetSourceAddress], for unsetting the flag.
//   - SourceAddress maps to cli flags: --source-address=IP.
//   - From option group: "Network"
func (c *Command) SourceAddress(ip string) *Command {
	c.addFlag(&Flag{
		ID:   "source_address",
		Flag: "--source-address",
		Args: []string{ip},
	})
	return c
}

// UnsetSourceAddress unsets any flags that were previously set by one of:
//   - [Command.SourceAddress]
func (c *Command) UnsetSourceAddress() *Command {
	c.removeFlagByID("source_address")
	return c
}

// Client to impersonate for requests. E.g. chrome, chrome-110, chrome:windows-10.
// Pass --impersonate="" to impersonate any client. Note that forcing impersonation
// for all requests may have a detrimental impact on download speed and stability
//
// Additional information:
//   - See [Command.UnsetImpersonate], for unsetting the flag.
//   - Impersonate maps to cli flags: --impersonate=CLIENT[:OS].
//   - From option group: "Network"
func (c *Command) Impersonate(client string) *Command {
	c.addFlag(&Flag{
		ID:   "impersonate",
		Flag: "--impersonate",
		Args: []string{client},
	})
	return c
}

// UnsetImpersonate unsets any flags that were previously set by one of:
//   - [Command.Impersonate]
func (c *Command) UnsetImpersonate() *Command {
	c.removeFlagByID("impersonate")
	return c
}

// List available clients to impersonate.
//
// Additional information:
//   - See [Command.UnsetListImpersonateTargets], for unsetting the flag.
//   - ListImpersonateTargets maps to cli flags: --list-impersonate-targets.
//   - From option group: "Network"
func (c *Command) ListImpersonateTargets() *Command {
	c.addFlag(&Flag{
		ID:   "list_impersonate_targets",
		Flag: "--list-impersonate-targets",
		Args: nil,
	})
	return c
}

// UnsetListImpersonateTargets unsets any flags that were previously set by one of:
//   - [Command.ListImpersonateTargets]
func (c *Command) UnsetListImpersonateTargets() *Command {
	c.removeFlagByID("list_impersonate_targets")
	return c
}

// Make all connections via IPv4
//
// Additional information:
//   - See [Command.UnsetForceIPv4], for unsetting the flag.
//   - ForceIPv4 maps to cli flags: -4/--force-ipv4.
//   - From option group: "Network"
func (c *Command) ForceIPv4() *Command {
	c.addFlag(&Flag{
		ID:   "source_address",
		Flag: "--force-ipv4",
		Args: nil,
	})
	return c
}

// UnsetForceIPv4 unsets any flags that were previously set by one of:
//   - [Command.ForceIPv4]
func (c *Command) UnsetForceIPv4() *Command {
	c.removeFlagByID("source_address")
	return c
}

// Make all connections via IPv6
//
// Additional information:
//   - See [Command.UnsetForceIPv6], for unsetting the flag.
//   - ForceIPv6 maps to cli flags: -6/--force-ipv6.
//   - From option group: "Network"
func (c *Command) ForceIPv6() *Command {
	c.addFlag(&Flag{
		ID:   "source_address",
		Flag: "--force-ipv6",
		Args: nil,
	})
	return c
}

// UnsetForceIPv6 unsets any flags that were previously set by one of:
//   - [Command.ForceIPv6]
func (c *Command) UnsetForceIPv6() *Command {
	c.removeFlagByID("source_address")
	return c
}

// Enable file:// URLs. This is disabled by default for security reasons.
//
// Additional information:
//   - See [Command.UnsetEnableFileURLs], for unsetting the flag.
//   - EnableFileURLs maps to cli flags: --enable-file-urls.
//   - From option group: "Network"
func (c *Command) EnableFileURLs() *Command {
	c.addFlag(&Flag{
		ID:   "enable_file_urls",
		Flag: "--enable-file-urls",
		Args: nil,
	})
	return c
}

// UnsetEnableFileURLs unsets any flags that were previously set by one of:
//   - [Command.EnableFileURLs]
func (c *Command) UnsetEnableFileURLs() *Command {
	c.removeFlagByID("enable_file_urls")
	return c
}

// Use this proxy to verify the IP address for some geo-restricted sites. The
// default proxy specified by --proxy (or none, if the option is not present) is
// used for the actual downloading
//
// Additional information:
//   - See [Command.UnsetGeoVerificationProxy], for unsetting the flag.
//   - GeoVerificationProxy maps to cli flags: --geo-verification-proxy=URL.
//   - From option group: "Geo-restriction"
func (c *Command) GeoVerificationProxy(url string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_verification_proxy",
		Flag: "--geo-verification-proxy",
		Args: []string{url},
	})
	return c
}

// UnsetGeoVerificationProxy unsets any flags that were previously set by one of:
//   - [Command.GeoVerificationProxy]
func (c *Command) UnsetGeoVerificationProxy() *Command {
	c.removeFlagByID("geo_verification_proxy")
	return c
}

// CNVerificationProxy sets the "cn-verification-proxy" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetCNVerificationProxy], for unsetting the flag.
//   - CNVerificationProxy maps to cli flags: --cn-verification-proxy=URL (hidden).
//   - From option group: "Geo-restriction"
//
// Deprecated: Use [Command.GeoVerificationProxy] instead.
func (c *Command) CNVerificationProxy(url string) *Command {
	c.addFlag(&Flag{
		ID:   "cn_verification_proxy",
		Flag: "--cn-verification-proxy",
		Args: []string{url},
	})
	return c
}

// UnsetCNVerificationProxy unsets any flags that were previously set by one of:
//   - [Command.CNVerificationProxy]
//
// Deprecated: Use [Command.GeoVerificationProxy] instead.
func (c *Command) UnsetCNVerificationProxy() *Command {
	c.removeFlagByID("cn_verification_proxy")
	return c
}

// How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction.
// One of "default" (only when known to be useful), "never", an IP block in CIDR
// notation, or a two-letter ISO 3166-2 country code
//
// Additional information:
//   - See [Command.UnsetXFF], for unsetting the flag.
//   - XFF maps to cli flags: --xff=VALUE.
//   - From option group: "Geo-restriction"
func (c *Command) XFF(value string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--xff",
		Args: []string{value},
	})
	return c
}

// UnsetXFF unsets any flags that were previously set by one of:
//   - [Command.XFF]
func (c *Command) UnsetXFF() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// GeoBypass sets the "geo-bypass" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGeoBypass], for unsetting the flag.
//   - GeoBypass maps to cli flags: --geo-bypass (hidden).
//   - From option group: "Geo-restriction"
func (c *Command) GeoBypass() *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--geo-bypass",
		Args: nil,
	})
	return c
}

// UnsetGeoBypass unsets any flags that were previously set by one of:
//   - [Command.GeoBypass]
//   - [Command.NoGeoBypass]
func (c *Command) UnsetGeoBypass() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// NoGeoBypass sets the "no-geo-bypass" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGeoBypass], for unsetting the flag.
//   - NoGeoBypass maps to cli flags: --no-geo-bypass (hidden).
//   - From option group: "Geo-restriction"
func (c *Command) NoGeoBypass() *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--no-geo-bypass",
		Args: nil,
	})
	return c
}

// GeoBypassCountry sets the "geo-bypass-country" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGeoBypassCountry], for unsetting the flag.
//   - GeoBypassCountry maps to cli flags: --geo-bypass-country=CODE (hidden).
//   - From option group: "Geo-restriction"
func (c *Command) GeoBypassCountry(code string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--geo-bypass-country",
		Args: []string{code},
	})
	return c
}

// UnsetGeoBypassCountry unsets any flags that were previously set by one of:
//   - [Command.GeoBypassCountry]
func (c *Command) UnsetGeoBypassCountry() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// GeoBypassIPBlock sets the "geo-bypass-ip-block" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGeoBypassIPBlock], for unsetting the flag.
//   - GeoBypassIPBlock maps to cli flags: --geo-bypass-ip-block=IP_BLOCK (hidden).
//   - From option group: "Geo-restriction"
func (c *Command) GeoBypassIPBlock(ipBlock string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--geo-bypass-ip-block",
		Args: []string{ipBlock},
	})
	return c
}

// UnsetGeoBypassIPBlock unsets any flags that were previously set by one of:
//   - [Command.GeoBypassIPBlock]
func (c *Command) UnsetGeoBypassIPBlock() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// PlaylistStart sets the "playlist-start" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPlaylistStart], for unsetting the flag.
//   - PlaylistStart maps to cli flags: --playlist-start=NUMBER (hidden).
//   - From option group: "Video Selection"
func (c *Command) PlaylistStart(number int) *Command {
	c.addFlag(&Flag{
		ID:   "playliststart",
		Flag: "--playlist-start",
		Args: []string{
			strconv.Itoa(number),
		},
	})
	return c
}

// UnsetPlaylistStart unsets any flags that were previously set by one of:
//   - [Command.PlaylistStart]
func (c *Command) UnsetPlaylistStart() *Command {
	c.removeFlagByID("playliststart")
	return c
}

// PlaylistEnd sets the "playlist-end" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPlaylistEnd], for unsetting the flag.
//   - PlaylistEnd maps to cli flags: --playlist-end=NUMBER (hidden).
//   - From option group: "Video Selection"
func (c *Command) PlaylistEnd(number int) *Command {
	c.addFlag(&Flag{
		ID:   "playlistend",
		Flag: "--playlist-end",
		Args: []string{
			strconv.Itoa(number),
		},
	})
	return c
}

// UnsetPlaylistEnd unsets any flags that were previously set by one of:
//   - [Command.PlaylistEnd]
func (c *Command) UnsetPlaylistEnd() *Command {
	c.removeFlagByID("playlistend")
	return c
}

// Comma separated playlist_index of the items to download. You can specify a range
// using "[START]:[STOP][:STEP]". For backward compatibility, START-STOP is also
// supported. Use negative indices to count from the right and negative STEP to
// download in reverse order. E.g. "-I 1:3,7,-5::2" used on a playlist of size 15
// will download the items at index 1,2,3,7,11,13,15
//
// Additional information:
//   - See [Command.UnsetPlaylistItems], for unsetting the flag.
//   - PlaylistItems maps to cli flags: -I/--playlist-items=ITEM_SPEC.
//   - From option group: "Video Selection"
func (c *Command) PlaylistItems(itemSpec string) *Command {
	c.addFlag(&Flag{
		ID:   "playlist_items",
		Flag: "--playlist-items",
		Args: []string{itemSpec},
	})
	return c
}

// UnsetPlaylistItems unsets any flags that were previously set by one of:
//   - [Command.PlaylistItems]
func (c *Command) UnsetPlaylistItems() *Command {
	c.removeFlagByID("playlist_items")
	return c
}

// MatchTitle sets the "match-title" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetMatchTitle], for unsetting the flag.
//   - MatchTitle maps to cli flags: --match-title=REGEX (hidden).
//   - From option group: "Video Selection"
func (c *Command) MatchTitle(regex string) *Command {
	c.addFlag(&Flag{
		ID:   "matchtitle",
		Flag: "--match-title",
		Args: []string{regex},
	})
	return c
}

// UnsetMatchTitle unsets any flags that were previously set by one of:
//   - [Command.MatchTitle]
func (c *Command) UnsetMatchTitle() *Command {
	c.removeFlagByID("matchtitle")
	return c
}

// RejectTitle sets the "reject-title" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetRejectTitle], for unsetting the flag.
//   - RejectTitle maps to cli flags: --reject-title=REGEX (hidden).
//   - From option group: "Video Selection"
func (c *Command) RejectTitle(regex string) *Command {
	c.addFlag(&Flag{
		ID:   "rejecttitle",
		Flag: "--reject-title",
		Args: []string{regex},
	})
	return c
}

// UnsetRejectTitle unsets any flags that were previously set by one of:
//   - [Command.RejectTitle]
func (c *Command) UnsetRejectTitle() *Command {
	c.removeFlagByID("rejecttitle")
	return c
}

// Abort download if filesize is smaller than SIZE, e.g. 50k or 44.6M
//
// Additional information:
//   - See [Command.UnsetMinFileSize], for unsetting the flag.
//   - MinFileSize maps to cli flags: --min-filesize=SIZE.
//   - From option group: "Video Selection"
func (c *Command) MinFileSize(size string) *Command {
	c.addFlag(&Flag{
		ID:   "min_filesize",
		Flag: "--min-filesize",
		Args: []string{size},
	})
	return c
}

// UnsetMinFileSize unsets any flags that were previously set by one of:
//   - [Command.MinFileSize]
func (c *Command) UnsetMinFileSize() *Command {
	c.removeFlagByID("min_filesize")
	return c
}

// Abort download if filesize is larger than SIZE, e.g. 50k or 44.6M
//
// Additional information:
//   - See [Command.UnsetMaxFileSize], for unsetting the flag.
//   - MaxFileSize maps to cli flags: --max-filesize=SIZE.
//   - From option group: "Video Selection"
func (c *Command) MaxFileSize(size string) *Command {
	c.addFlag(&Flag{
		ID:   "max_filesize",
		Flag: "--max-filesize",
		Args: []string{size},
	})
	return c
}

// UnsetMaxFileSize unsets any flags that were previously set by one of:
//   - [Command.MaxFileSize]
func (c *Command) UnsetMaxFileSize() *Command {
	c.removeFlagByID("max_filesize")
	return c
}

// Download only videos uploaded on this date. The date can be "YYYYMMDD" or in the
// format [now|today|yesterday][-N[day|week|month|year]]. E.g. "--date
// today-2weeks" downloads only videos uploaded on the same day two weeks ago
//
// Additional information:
//   - See [Command.UnsetDate], for unsetting the flag.
//   - Date maps to cli flags: --date=DATE.
//   - From option group: "Video Selection"
func (c *Command) Date(date string) *Command {
	c.addFlag(&Flag{
		ID:   "date",
		Flag: "--date",
		Args: []string{date},
	})
	return c
}

// UnsetDate unsets any flags that were previously set by one of:
//   - [Command.Date]
func (c *Command) UnsetDate() *Command {
	c.removeFlagByID("date")
	return c
}

// Download only videos uploaded on or before this date. The date formats accepted
// is the same as --date
//
// Additional information:
//   - See [Command.UnsetDateBefore], for unsetting the flag.
//   - DateBefore maps to cli flags: --datebefore=DATE.
//   - From option group: "Video Selection"
func (c *Command) DateBefore(date string) *Command {
	c.addFlag(&Flag{
		ID:   "datebefore",
		Flag: "--datebefore",
		Args: []string{date},
	})
	return c
}

// UnsetDateBefore unsets any flags that were previously set by one of:
//   - [Command.DateBefore]
func (c *Command) UnsetDateBefore() *Command {
	c.removeFlagByID("datebefore")
	return c
}

// Download only videos uploaded on or after this date. The date formats accepted
// is the same as --date
//
// Additional information:
//   - See [Command.UnsetDateAfter], for unsetting the flag.
//   - DateAfter maps to cli flags: --dateafter=DATE.
//   - From option group: "Video Selection"
func (c *Command) DateAfter(date string) *Command {
	c.addFlag(&Flag{
		ID:   "dateafter",
		Flag: "--dateafter",
		Args: []string{date},
	})
	return c
}

// UnsetDateAfter unsets any flags that were previously set by one of:
//   - [Command.DateAfter]
func (c *Command) UnsetDateAfter() *Command {
	c.removeFlagByID("dateafter")
	return c
}

// MinViews sets the "min-views" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetMinViews], for unsetting the flag.
//   - MinViews maps to cli flags: --min-views=COUNT (hidden).
//   - From option group: "Video Selection"
func (c *Command) MinViews(count int) *Command {
	c.addFlag(&Flag{
		ID:   "min_views",
		Flag: "--min-views",
		Args: []string{
			strconv.Itoa(count),
		},
	})
	return c
}

// UnsetMinViews unsets any flags that were previously set by one of:
//   - [Command.MinViews]
func (c *Command) UnsetMinViews() *Command {
	c.removeFlagByID("min_views")
	return c
}

// MaxViews sets the "max-views" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetMaxViews], for unsetting the flag.
//   - MaxViews maps to cli flags: --max-views=COUNT (hidden).
//   - From option group: "Video Selection"
func (c *Command) MaxViews(count int) *Command {
	c.addFlag(&Flag{
		ID:   "max_views",
		Flag: "--max-views",
		Args: []string{
			strconv.Itoa(count),
		},
	})
	return c
}

// UnsetMaxViews unsets any flags that were previously set by one of:
//   - [Command.MaxViews]
func (c *Command) UnsetMaxViews() *Command {
	c.removeFlagByID("max_views")
	return c
}

// Generic video filter. Any "OUTPUT TEMPLATE" field can be compared with a number
// or a string using the operators defined in "Filtering Formats". You can also
// simply specify a field to match if the field is present, use "!field" to check
// if the field is not present, and "&" to check multiple conditions. Use a "\" to
// escape "&" or quotes if needed. If used multiple times, the filter matches if at
// least one of the conditions is met. E.g. --match-filter !is_live --match-filter
// "like_count>?100 & description~='(?i)\bcats \& dogs\b'" matches only videos that
// are not live OR those that have a like count more than 100 (or the like field is
// not available) and also has a description that contains the phrase "cats & dogs"
// (caseless). Use "--match-filter -" to interactively ask whether to download each
// video
//
// Additional information:
//   - See [Command.UnsetMatchFilters], for unsetting the flag.
//   - MatchFilters maps to cli flags: --match-filters=FILTER.
//   - From option group: "Video Selection"
func (c *Command) MatchFilters(filter string) *Command {
	c.addFlag(&Flag{
		ID:   "match_filter",
		Flag: "--match-filters",
		Args: []string{filter},
	})
	return c
}

// UnsetMatchFilters unsets any flags that were previously set by one of:
//   - [Command.MatchFilters]
//   - [Command.NoMatchFilters]
func (c *Command) UnsetMatchFilters() *Command {
	c.removeFlagByID("match_filter")
	return c
}

// Do not use any --match-filter (default)
//
// Additional information:
//   - See [Command.UnsetMatchFilters], for unsetting the flag.
//   - NoMatchFilters maps to cli flags: --no-match-filters.
//   - From option group: "Video Selection"
func (c *Command) NoMatchFilters() *Command {
	c.addFlag(&Flag{
		ID:   "match_filter",
		Flag: "--no-match-filters",
		Args: nil,
	})
	return c
}

// Same as "--match-filters" but stops the download process when a video is
// rejected
//
// Additional information:
//   - See [Command.UnsetBreakMatchFilters], for unsetting the flag.
//   - BreakMatchFilters maps to cli flags: --break-match-filters=FILTER.
//   - From option group: "Video Selection"
func (c *Command) BreakMatchFilters(filter string) *Command {
	c.addFlag(&Flag{
		ID:   "breaking_match_filter",
		Flag: "--break-match-filters",
		Args: []string{filter},
	})
	return c
}

// UnsetBreakMatchFilters unsets any flags that were previously set by one of:
//   - [Command.BreakMatchFilters]
//   - [Command.NoBreakMatchFilters]
func (c *Command) UnsetBreakMatchFilters() *Command {
	c.removeFlagByID("breaking_match_filter")
	return c
}

// Do not use any --break-match-filters (default)
//
// Additional information:
//   - See [Command.UnsetBreakMatchFilters], for unsetting the flag.
//   - NoBreakMatchFilters maps to cli flags: --no-break-match-filters.
//   - From option group: "Video Selection"
func (c *Command) NoBreakMatchFilters() *Command {
	c.addFlag(&Flag{
		ID:   "breaking_match_filter",
		Flag: "--no-break-match-filters",
		Args: nil,
	})
	return c
}

// Download only the video, if the URL refers to a video and a playlist
//
// Additional information:
//   - See [Command.UnsetPlaylist], for unsetting the flag.
//   - NoPlaylist maps to cli flags: --no-playlist.
//   - From option group: "Video Selection"
func (c *Command) NoPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "noplaylist",
		Flag: "--no-playlist",
		Args: nil,
	})
	return c
}

// UnsetPlaylist unsets any flags that were previously set by one of:
//   - [Command.NoPlaylist]
//   - [Command.YesPlaylist]
func (c *Command) UnsetPlaylist() *Command {
	c.removeFlagByID("noplaylist")
	return c
}

// Download the playlist, if the URL refers to a video and a playlist
//
// Additional information:
//   - See [Command.UnsetPlaylist], for unsetting the flag.
//   - YesPlaylist maps to cli flags: --yes-playlist.
//   - From option group: "Video Selection"
func (c *Command) YesPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "noplaylist",
		Flag: "--yes-playlist",
		Args: nil,
	})
	return c
}

// Download only videos suitable for the given age
//
// Additional information:
//   - See [Command.UnsetAgeLimit], for unsetting the flag.
//   - AgeLimit maps to cli flags: --age-limit=YEARS.
//   - From option group: "Video Selection"
func (c *Command) AgeLimit(years int) *Command {
	c.addFlag(&Flag{
		ID:   "age_limit",
		Flag: "--age-limit",
		Args: []string{
			strconv.Itoa(years),
		},
	})
	return c
}

// UnsetAgeLimit unsets any flags that were previously set by one of:
//   - [Command.AgeLimit]
func (c *Command) UnsetAgeLimit() *Command {
	c.removeFlagByID("age_limit")
	return c
}

// Download only videos not listed in the archive file. Record the IDs of all
// downloaded videos in it
//
// Additional information:
//   - See [Command.UnsetDownloadArchive], for unsetting the flag.
//   - DownloadArchive maps to cli flags: --download-archive=FILE.
//   - From option group: "Video Selection"
func (c *Command) DownloadArchive(file string) *Command {
	c.addFlag(&Flag{
		ID:   "download_archive",
		Flag: "--download-archive",
		Args: []string{file},
	})
	return c
}

// UnsetDownloadArchive unsets any flags that were previously set by one of:
//   - [Command.DownloadArchive]
//   - [Command.NoDownloadArchive]
func (c *Command) UnsetDownloadArchive() *Command {
	c.removeFlagByID("download_archive")
	return c
}

// Do not use archive file (default)
//
// Additional information:
//   - See [Command.UnsetDownloadArchive], for unsetting the flag.
//   - NoDownloadArchive maps to cli flags: --no-download-archive.
//   - From option group: "Video Selection"
func (c *Command) NoDownloadArchive() *Command {
	c.addFlag(&Flag{
		ID:   "download_archive",
		Flag: "--no-download-archive",
		Args: nil,
	})
	return c
}

// Abort after downloading NUMBER files
//
// Additional information:
//   - See [Command.UnsetMaxDownloads], for unsetting the flag.
//   - MaxDownloads maps to cli flags: --max-downloads=NUMBER.
//   - From option group: "Video Selection"
func (c *Command) MaxDownloads(number int) *Command {
	c.addFlag(&Flag{
		ID:   "max_downloads",
		Flag: "--max-downloads",
		Args: []string{
			strconv.Itoa(number),
		},
	})
	return c
}

// UnsetMaxDownloads unsets any flags that were previously set by one of:
//   - [Command.MaxDownloads]
func (c *Command) UnsetMaxDownloads() *Command {
	c.removeFlagByID("max_downloads")
	return c
}

// Stop the download process when encountering a file that is in the archive
//
// Additional information:
//   - See [Command.UnsetBreakOnExisting], for unsetting the flag.
//   - BreakOnExisting maps to cli flags: --break-on-existing.
//   - From option group: "Video Selection"
func (c *Command) BreakOnExisting() *Command {
	c.addFlag(&Flag{
		ID:   "break_on_existing",
		Flag: "--break-on-existing",
		Args: nil,
	})
	return c
}

// UnsetBreakOnExisting unsets any flags that were previously set by one of:
//   - [Command.BreakOnExisting]
//   - [Command.NoBreakOnExisting]
func (c *Command) UnsetBreakOnExisting() *Command {
	c.removeFlagByID("break_on_existing")
	return c
}

// Do not stop the download process when encountering a file that is in the archive
// (default)
//
// Additional information:
//   - See [Command.UnsetBreakOnExisting], for unsetting the flag.
//   - NoBreakOnExisting maps to cli flags: --no-break-on-existing.
//   - From option group: "Video Selection"
func (c *Command) NoBreakOnExisting() *Command {
	c.addFlag(&Flag{
		ID:   "break_on_existing",
		Flag: "--no-break-on-existing",
		Args: nil,
	})
	return c
}

// BreakOnReject sets the "break-on-reject" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetBreakOnReject], for unsetting the flag.
//   - BreakOnReject maps to cli flags: --break-on-reject (hidden).
//   - From option group: "Video Selection"
func (c *Command) BreakOnReject() *Command {
	c.addFlag(&Flag{
		ID:   "break_on_reject",
		Flag: "--break-on-reject",
		Args: nil,
	})
	return c
}

// UnsetBreakOnReject unsets any flags that were previously set by one of:
//   - [Command.BreakOnReject]
func (c *Command) UnsetBreakOnReject() *Command {
	c.removeFlagByID("break_on_reject")
	return c
}

// Alters --max-downloads, --break-on-existing, --break-match-filter, and
// autonumber to reset per input URL
//
// Additional information:
//   - See [Command.UnsetBreakPerInput], for unsetting the flag.
//   - BreakPerInput maps to cli flags: --break-per-input.
//   - From option group: "Video Selection"
func (c *Command) BreakPerInput() *Command {
	c.addFlag(&Flag{
		ID:   "break_per_url",
		Flag: "--break-per-input",
		Args: nil,
	})
	return c
}

// UnsetBreakPerInput unsets any flags that were previously set by one of:
//   - [Command.BreakPerInput]
//   - [Command.NoBreakPerInput]
func (c *Command) UnsetBreakPerInput() *Command {
	c.removeFlagByID("break_per_url")
	return c
}

// --break-on-existing and similar options terminates the entire download queue
//
// Additional information:
//   - See [Command.UnsetBreakPerInput], for unsetting the flag.
//   - NoBreakPerInput maps to cli flags: --no-break-per-input.
//   - From option group: "Video Selection"
func (c *Command) NoBreakPerInput() *Command {
	c.addFlag(&Flag{
		ID:   "break_per_url",
		Flag: "--no-break-per-input",
		Args: nil,
	})
	return c
}

// Number of allowed failures until the rest of the playlist is skipped
//
// Additional information:
//   - See [Command.UnsetSkipPlaylistAfterErrors], for unsetting the flag.
//   - SkipPlaylistAfterErrors maps to cli flags: --skip-playlist-after-errors=N.
//   - From option group: "Video Selection"
func (c *Command) SkipPlaylistAfterErrors(n int) *Command {
	c.addFlag(&Flag{
		ID:   "skip_playlist_after_errors",
		Flag: "--skip-playlist-after-errors",
		Args: []string{
			strconv.Itoa(n),
		},
	})
	return c
}

// UnsetSkipPlaylistAfterErrors unsets any flags that were previously set by one of:
//   - [Command.SkipPlaylistAfterErrors]
func (c *Command) UnsetSkipPlaylistAfterErrors() *Command {
	c.removeFlagByID("skip_playlist_after_errors")
	return c
}

// IncludeAds sets the "include-ads" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetIncludeAds], for unsetting the flag.
//   - IncludeAds maps to cli flags: --include-ads (hidden).
//   - From option group: "Video Selection"
//
// Deprecated: No longer supported.
func (c *Command) IncludeAds() *Command {
	c.addFlag(&Flag{
		ID:   "include_ads",
		Flag: "--include-ads",
		Args: nil,
	})
	return c
}

// UnsetIncludeAds unsets any flags that were previously set by one of:
//   - [Command.IncludeAds]
//   - [Command.NoIncludeAds]
//
// Deprecated: No longer supported.
func (c *Command) UnsetIncludeAds() *Command {
	c.removeFlagByID("include_ads")
	return c
}

// NoIncludeAds sets the "no-include-ads" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetIncludeAds], for unsetting the flag.
//   - NoIncludeAds maps to cli flags: --no-include-ads (hidden).
//   - From option group: "Video Selection"
//
// Deprecated: This flag is now default in yt-dlp.
func (c *Command) NoIncludeAds() *Command {
	c.addFlag(&Flag{
		ID:   "include_ads",
		Flag: "--no-include-ads",
		Args: nil,
	})
	return c
}

// Number of fragments of a dash/hlsnative video that should be downloaded
// concurrently (default is 1)
//
// Additional information:
//   - See [Command.UnsetConcurrentFragments], for unsetting the flag.
//   - ConcurrentFragments maps to cli flags: -N/--concurrent-fragments=N.
//   - From option group: "Download"
func (c *Command) ConcurrentFragments(n int) *Command {
	c.addFlag(&Flag{
		ID:   "concurrent_fragment_downloads",
		Flag: "--concurrent-fragments",
		Args: []string{
			strconv.Itoa(n),
		},
	})
	return c
}

// UnsetConcurrentFragments unsets any flags that were previously set by one of:
//   - [Command.ConcurrentFragments]
func (c *Command) UnsetConcurrentFragments() *Command {
	c.removeFlagByID("concurrent_fragment_downloads")
	return c
}

// Maximum download rate in bytes per second, e.g. 50K or 4.2M
//
// Additional information:
//   - See [Command.UnsetLimitRate], for unsetting the flag.
//   - LimitRate maps to cli flags: -r/--limit-rate/--rate-limit=RATE.
//   - From option group: "Download"
func (c *Command) LimitRate(rate string) *Command {
	c.addFlag(&Flag{
		ID:   "ratelimit",
		Flag: "--limit-rate",
		Args: []string{rate},
	})
	return c
}

// UnsetLimitRate unsets any flags that were previously set by one of:
//   - [Command.LimitRate]
func (c *Command) UnsetLimitRate() *Command {
	c.removeFlagByID("ratelimit")
	return c
}

// Minimum download rate in bytes per second below which throttling is assumed and
// the video data is re-extracted, e.g. 100K
//
// Additional information:
//   - See [Command.UnsetThrottledRate], for unsetting the flag.
//   - ThrottledRate maps to cli flags: --throttled-rate=RATE.
//   - From option group: "Download"
func (c *Command) ThrottledRate(rate string) *Command {
	c.addFlag(&Flag{
		ID:   "throttledratelimit",
		Flag: "--throttled-rate",
		Args: []string{rate},
	})
	return c
}

// UnsetThrottledRate unsets any flags that were previously set by one of:
//   - [Command.ThrottledRate]
func (c *Command) UnsetThrottledRate() *Command {
	c.removeFlagByID("throttledratelimit")
	return c
}

// Number of retries (default is 10), or "infinite"
//
// Additional information:
//   - See [Command.UnsetRetries], for unsetting the flag.
//   - Retries maps to cli flags: -R/--retries=RETRIES.
//   - From option group: "Download"
func (c *Command) Retries(retries string) *Command {
	c.addFlag(&Flag{
		ID:   "retries",
		Flag: "--retries",
		Args: []string{retries},
	})
	return c
}

// UnsetRetries unsets any flags that were previously set by one of:
//   - [Command.Retries]
func (c *Command) UnsetRetries() *Command {
	c.removeFlagByID("retries")
	return c
}

// Number of times to retry on file access error (default is 3), or "infinite"
//
// Additional information:
//   - See [Command.UnsetFileAccessRetries], for unsetting the flag.
//   - FileAccessRetries maps to cli flags: --file-access-retries=RETRIES.
//   - From option group: "Download"
func (c *Command) FileAccessRetries(retries string) *Command {
	c.addFlag(&Flag{
		ID:   "file_access_retries",
		Flag: "--file-access-retries",
		Args: []string{retries},
	})
	return c
}

// UnsetFileAccessRetries unsets any flags that were previously set by one of:
//   - [Command.FileAccessRetries]
func (c *Command) UnsetFileAccessRetries() *Command {
	c.removeFlagByID("file_access_retries")
	return c
}

// Number of retries for a fragment (default is 10), or "infinite" (DASH, hlsnative
// and ISM)
//
// Additional information:
//   - See [Command.UnsetFragmentRetries], for unsetting the flag.
//   - FragmentRetries maps to cli flags: --fragment-retries=RETRIES.
//   - From option group: "Download"
func (c *Command) FragmentRetries(retries string) *Command {
	c.addFlag(&Flag{
		ID:   "fragment_retries",
		Flag: "--fragment-retries",
		Args: []string{retries},
	})
	return c
}

// UnsetFragmentRetries unsets any flags that were previously set by one of:
//   - [Command.FragmentRetries]
func (c *Command) UnsetFragmentRetries() *Command {
	c.removeFlagByID("fragment_retries")
	return c
}

// Time to sleep between retries in seconds (optionally) prefixed by the type of
// retry (http (default), fragment, file_access, extractor) to apply the sleep to.
// EXPR can be a number, linear=START[:END[:STEP=1]] or exp=START[:END[:BASE=2]].
// This option can be used multiple times to set the sleep for the different retry
// types, e.g. --retry-sleep linear=1::2 --retry-sleep fragment:exp=1:20
//
// Additional information:
//   - See [Command.UnsetRetrySleep], for unsetting the flag.
//   - RetrySleep maps to cli flags: --retry-sleep=[TYPE:]EXPR.
//   - From option group: "Download"
func (c *Command) RetrySleep(expr string) *Command {
	c.addFlag(&Flag{
		ID:   "retry_sleep",
		Flag: "--retry-sleep",
		Args: []string{expr},
	})
	return c
}

// UnsetRetrySleep unsets any flags that were previously set by one of:
//   - [Command.RetrySleep]
func (c *Command) UnsetRetrySleep() *Command {
	c.removeFlagByID("retry_sleep")
	return c
}

// Skip unavailable fragments for DASH, hlsnative and ISM downloads (default)
//
// Additional information:
//   - See [Command.UnsetSkipUnavailableFragments], for unsetting the flag.
//   - SkipUnavailableFragments maps to cli flags: --skip-unavailable-fragments/--no-abort-on-unavailable-fragments.
//   - From option group: "Download"
func (c *Command) SkipUnavailableFragments() *Command {
	c.addFlag(&Flag{
		ID:   "skip_unavailable_fragments",
		Flag: "--skip-unavailable-fragments",
		Args: nil,
	})
	return c
}

// UnsetSkipUnavailableFragments unsets any flags that were previously set by one of:
//   - [Command.SkipUnavailableFragments]
func (c *Command) UnsetSkipUnavailableFragments() *Command {
	c.removeFlagByID("skip_unavailable_fragments")
	return c
}

// Abort download if a fragment is unavailable
//
// Additional information:
//   - See [Command.UnsetAbortOnUnavailableFragments], for unsetting the flag.
//   - AbortOnUnavailableFragments maps to cli flags: --abort-on-unavailable-fragments/--no-skip-unavailable-fragments.
//   - From option group: "Download"
func (c *Command) AbortOnUnavailableFragments() *Command {
	c.addFlag(&Flag{
		ID:   "skip_unavailable_fragments",
		Flag: "--abort-on-unavailable-fragments",
		Args: nil,
	})
	return c
}

// UnsetAbortOnUnavailableFragments unsets any flags that were previously set by one of:
//   - [Command.AbortOnUnavailableFragments]
func (c *Command) UnsetAbortOnUnavailableFragments() *Command {
	c.removeFlagByID("skip_unavailable_fragments")
	return c
}

// Keep downloaded fragments on disk after downloading is finished
//
// Additional information:
//   - See [Command.UnsetKeepFragments], for unsetting the flag.
//   - KeepFragments maps to cli flags: --keep-fragments.
//   - From option group: "Download"
func (c *Command) KeepFragments() *Command {
	c.addFlag(&Flag{
		ID:   "keep_fragments",
		Flag: "--keep-fragments",
		Args: nil,
	})
	return c
}

// UnsetKeepFragments unsets any flags that were previously set by one of:
//   - [Command.KeepFragments]
//   - [Command.NoKeepFragments]
func (c *Command) UnsetKeepFragments() *Command {
	c.removeFlagByID("keep_fragments")
	return c
}

// Delete downloaded fragments after downloading is finished (default)
//
// Additional information:
//   - See [Command.UnsetKeepFragments], for unsetting the flag.
//   - NoKeepFragments maps to cli flags: --no-keep-fragments.
//   - From option group: "Download"
func (c *Command) NoKeepFragments() *Command {
	c.addFlag(&Flag{
		ID:   "keep_fragments",
		Flag: "--no-keep-fragments",
		Args: nil,
	})
	return c
}

// Size of download buffer, e.g. 1024 or 16K (default is 1024)
//
// Additional information:
//   - See [Command.UnsetBufferSize], for unsetting the flag.
//   - BufferSize maps to cli flags: --buffer-size=SIZE.
//   - From option group: "Download"
func (c *Command) BufferSize(size string) *Command {
	c.addFlag(&Flag{
		ID:   "buffersize",
		Flag: "--buffer-size",
		Args: []string{size},
	})
	return c
}

// UnsetBufferSize unsets any flags that were previously set by one of:
//   - [Command.BufferSize]
func (c *Command) UnsetBufferSize() *Command {
	c.removeFlagByID("buffersize")
	return c
}

// The buffer size is automatically resized from an initial value of --buffer-size
// (default)
//
// Additional information:
//   - See [Command.UnsetResizeBuffer], for unsetting the flag.
//   - ResizeBuffer maps to cli flags: --resize-buffer.
//   - From option group: "Download"
func (c *Command) ResizeBuffer() *Command {
	c.addFlag(&Flag{
		ID:   "noresizebuffer",
		Flag: "--resize-buffer",
		Args: nil,
	})
	return c
}

// UnsetResizeBuffer unsets any flags that were previously set by one of:
//   - [Command.ResizeBuffer]
//   - [Command.NoResizeBuffer]
func (c *Command) UnsetResizeBuffer() *Command {
	c.removeFlagByID("noresizebuffer")
	return c
}

// Do not automatically adjust the buffer size
//
// Additional information:
//   - See [Command.UnsetResizeBuffer], for unsetting the flag.
//   - NoResizeBuffer maps to cli flags: --no-resize-buffer.
//   - From option group: "Download"
func (c *Command) NoResizeBuffer() *Command {
	c.addFlag(&Flag{
		ID:   "noresizebuffer",
		Flag: "--no-resize-buffer",
		Args: nil,
	})
	return c
}

// Size of a chunk for chunk-based HTTP downloading, e.g. 10485760 or 10M (default
// is disabled). May be useful for bypassing bandwidth throttling imposed by a
// webserver (experimental)
//
// Additional information:
//   - See [Command.UnsetHTTPChunkSize], for unsetting the flag.
//   - HTTPChunkSize maps to cli flags: --http-chunk-size=SIZE.
//   - From option group: "Download"
func (c *Command) HTTPChunkSize(size string) *Command {
	c.addFlag(&Flag{
		ID:   "http_chunk_size",
		Flag: "--http-chunk-size",
		Args: []string{size},
	})
	return c
}

// UnsetHTTPChunkSize unsets any flags that were previously set by one of:
//   - [Command.HTTPChunkSize]
func (c *Command) UnsetHTTPChunkSize() *Command {
	c.removeFlagByID("http_chunk_size")
	return c
}

// PlaylistReverse sets the "playlist-reverse" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPlaylistReverse], for unsetting the flag.
//   - PlaylistReverse maps to cli flags: --playlist-reverse (hidden).
//   - From option group: "Download"
func (c *Command) PlaylistReverse() *Command {
	c.addFlag(&Flag{
		ID:   "playlist_reverse",
		Flag: "--playlist-reverse",
		Args: nil,
	})
	return c
}

// UnsetPlaylistReverse unsets any flags that were previously set by one of:
//   - [Command.PlaylistReverse]
//   - [Command.NoPlaylistReverse]
func (c *Command) UnsetPlaylistReverse() *Command {
	c.removeFlagByID("playlist_reverse")
	return c
}

// NoPlaylistReverse sets the "no-playlist-reverse" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPlaylistReverse], for unsetting the flag.
//   - NoPlaylistReverse maps to cli flags: --no-playlist-reverse (hidden).
//   - From option group: "Download"
func (c *Command) NoPlaylistReverse() *Command {
	c.addFlag(&Flag{
		ID:   "playlist_reverse",
		Flag: "--no-playlist-reverse",
		Args: nil,
	})
	return c
}

// Download playlist videos in random order
//
// Additional information:
//   - See [Command.UnsetPlaylistRandom], for unsetting the flag.
//   - PlaylistRandom maps to cli flags: --playlist-random.
//   - From option group: "Download"
func (c *Command) PlaylistRandom() *Command {
	c.addFlag(&Flag{
		ID:   "playlist_random",
		Flag: "--playlist-random",
		Args: nil,
	})
	return c
}

// UnsetPlaylistRandom unsets any flags that were previously set by one of:
//   - [Command.PlaylistRandom]
func (c *Command) UnsetPlaylistRandom() *Command {
	c.removeFlagByID("playlist_random")
	return c
}

// Process entries in the playlist as they are received. This disables n_entries,
// --playlist-random and --playlist-reverse
//
// Additional information:
//   - See [Command.UnsetLazyPlaylist], for unsetting the flag.
//   - LazyPlaylist maps to cli flags: --lazy-playlist.
//   - From option group: "Download"
func (c *Command) LazyPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "lazy_playlist",
		Flag: "--lazy-playlist",
		Args: nil,
	})
	return c
}

// UnsetLazyPlaylist unsets any flags that were previously set by one of:
//   - [Command.LazyPlaylist]
//   - [Command.NoLazyPlaylist]
func (c *Command) UnsetLazyPlaylist() *Command {
	c.removeFlagByID("lazy_playlist")
	return c
}

// Process videos in the playlist only after the entire playlist is parsed
// (default)
//
// Additional information:
//   - See [Command.UnsetLazyPlaylist], for unsetting the flag.
//   - NoLazyPlaylist maps to cli flags: --no-lazy-playlist.
//   - From option group: "Download"
func (c *Command) NoLazyPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "lazy_playlist",
		Flag: "--no-lazy-playlist",
		Args: nil,
	})
	return c
}

// Set file xattribute ytdl.filesize with expected file size
//
// Additional information:
//   - See [Command.UnsetXattrSetFileSize], for unsetting the flag.
//   - XattrSetFileSize maps to cli flags: --xattr-set-filesize.
//   - From option group: "Download"
func (c *Command) XattrSetFileSize() *Command {
	c.addFlag(&Flag{
		ID:   "xattr_set_filesize",
		Flag: "--xattr-set-filesize",
		Args: nil,
	})
	return c
}

// UnsetXattrSetFileSize unsets any flags that were previously set by one of:
//   - [Command.XattrSetFileSize]
func (c *Command) UnsetXattrSetFileSize() *Command {
	c.removeFlagByID("xattr_set_filesize")
	return c
}

// HLSPreferNative sets the "hls-prefer-native" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetHLSPreferNative], for unsetting the flag.
//   - HLSPreferNative maps to cli flags: --hls-prefer-native (hidden).
//   - From option group: "Download"
func (c *Command) HLSPreferNative() *Command {
	c.addFlag(&Flag{
		ID:   "hls_prefer_native",
		Flag: "--hls-prefer-native",
		Args: nil,
	})
	return c
}

// UnsetHLSPreferNative unsets any flags that were previously set by one of:
//   - [Command.HLSPreferNative]
func (c *Command) UnsetHLSPreferNative() *Command {
	c.removeFlagByID("hls_prefer_native")
	return c
}

// HLSPreferFFmpeg sets the "hls-prefer-ffmpeg" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetHLSPreferFFmpeg], for unsetting the flag.
//   - HLSPreferFFmpeg maps to cli flags: --hls-prefer-ffmpeg (hidden).
//   - From option group: "Download"
func (c *Command) HLSPreferFFmpeg() *Command {
	c.addFlag(&Flag{
		ID:   "hls_prefer_native",
		Flag: "--hls-prefer-ffmpeg",
		Args: nil,
	})
	return c
}

// UnsetHLSPreferFFmpeg unsets any flags that were previously set by one of:
//   - [Command.HLSPreferFFmpeg]
func (c *Command) UnsetHLSPreferFFmpeg() *Command {
	c.removeFlagByID("hls_prefer_native")
	return c
}

// Use the mpegts container for HLS videos; allowing some players to play the video
// while downloading, and reducing the chance of file corruption if download is
// interrupted. This is enabled by default for live streams
//
// Additional information:
//   - See [Command.UnsetHLSUseMPEGTS], for unsetting the flag.
//   - HLSUseMPEGTS maps to cli flags: --hls-use-mpegts.
//   - From option group: "Download"
func (c *Command) HLSUseMPEGTS() *Command {
	c.addFlag(&Flag{
		ID:   "hls_use_mpegts",
		Flag: "--hls-use-mpegts",
		Args: nil,
	})
	return c
}

// UnsetHLSUseMPEGTS unsets any flags that were previously set by one of:
//   - [Command.HLSUseMPEGTS]
//   - [Command.NoHLSUseMPEGTS]
func (c *Command) UnsetHLSUseMPEGTS() *Command {
	c.removeFlagByID("hls_use_mpegts")
	return c
}

// Do not use the mpegts container for HLS videos. This is default when not
// downloading live streams
//
// Additional information:
//   - See [Command.UnsetHLSUseMPEGTS], for unsetting the flag.
//   - NoHLSUseMPEGTS maps to cli flags: --no-hls-use-mpegts.
//   - From option group: "Download"
func (c *Command) NoHLSUseMPEGTS() *Command {
	c.addFlag(&Flag{
		ID:   "hls_use_mpegts",
		Flag: "--no-hls-use-mpegts",
		Args: nil,
	})
	return c
}

// Download only chapters that match the regular expression. A "*" prefix denotes
// time-range instead of chapter. Negative timestamps are calculated from the end.
// "*from-url" can be used to download between the "start_time" and "end_time"
// extracted from the URL. Needs ffmpeg. This option can be used multiple times to
// download multiple sections, e.g. --download-sections "*10:15-inf"
// --download-sections "intro"
//
// Additional information:
//   - See [Command.UnsetDownloadSections], for unsetting the flag.
//   - DownloadSections maps to cli flags: --download-sections=REGEX.
//   - From option group: "Download"
func (c *Command) DownloadSections(regex string) *Command {
	c.addFlag(&Flag{
		ID:   "download_ranges",
		Flag: "--download-sections",
		Args: []string{regex},
	})
	return c
}

// UnsetDownloadSections unsets any flags that were previously set by one of:
//   - [Command.DownloadSections]
func (c *Command) UnsetDownloadSections() *Command {
	c.removeFlagByID("download_ranges")
	return c
}

// Name or path of the external downloader to use (optionally) prefixed by the
// protocols (http, ftp, m3u8, dash, rstp, rtmp, mms) to use it for. Currently
// supports native, aria2c, avconv, axel, curl, ffmpeg, httpie, wget. You can use
// this option multiple times to set different downloaders for different protocols.
// E.g. --downloader aria2c --downloader "dash,m3u8:native" will use aria2c for
// http/ftp downloads, and the native downloader for dash/m3u8 downloads
//
// Additional information:
//   - See [Command.UnsetDownloader], for unsetting the flag.
//   - Downloader maps to cli flags: --downloader/--external-downloader=[PROTO:]NAME.
//   - From option group: "Download"
func (c *Command) Downloader(name string) *Command {
	c.addFlag(&Flag{
		ID:   "external_downloader",
		Flag: "--downloader",
		Args: []string{name},
	})
	return c
}

// UnsetDownloader unsets any flags that were previously set by one of:
//   - [Command.Downloader]
func (c *Command) UnsetDownloader() *Command {
	c.removeFlagByID("external_downloader")
	return c
}

// Give these arguments to the external downloader. Specify the downloader name and
// the arguments separated by a colon ":". For ffmpeg, arguments can be passed to
// different positions using the same syntax as --postprocessor-args. You can use
// this option multiple times to give different arguments to different downloaders
//
// Additional information:
//   - See [Command.UnsetDownloaderArgs], for unsetting the flag.
//   - DownloaderArgs maps to cli flags: --downloader-args/--external-downloader-args=NAME:ARGS.
//   - From option group: "Download"
func (c *Command) DownloaderArgs(nameargs string) *Command {
	c.addFlag(&Flag{
		ID:   "external_downloader_args",
		Flag: "--downloader-args",
		Args: []string{nameargs},
	})
	return c
}

// UnsetDownloaderArgs unsets any flags that were previously set by one of:
//   - [Command.DownloaderArgs]
func (c *Command) UnsetDownloaderArgs() *Command {
	c.removeFlagByID("external_downloader_args")
	return c
}

// File containing URLs to download ("-" for stdin), one URL per line. Lines
// starting with "#", ";" or "]" are considered as comments and ignored
//
// Additional information:
//   - See [Command.UnsetBatchFile], for unsetting the flag.
//   - BatchFile maps to cli flags: -a/--batch-file=FILE.
//   - From option group: "Filesystem"
func (c *Command) BatchFile(file string) *Command {
	c.addFlag(&Flag{
		ID:   "batchfile",
		Flag: "--batch-file",
		Args: []string{file},
	})
	return c
}

// UnsetBatchFile unsets any flags that were previously set by one of:
//   - [Command.BatchFile]
//   - [Command.NoBatchFile]
func (c *Command) UnsetBatchFile() *Command {
	c.removeFlagByID("batchfile")
	return c
}

// Do not read URLs from batch file (default)
//
// Additional information:
//   - See [Command.UnsetBatchFile], for unsetting the flag.
//   - NoBatchFile maps to cli flags: --no-batch-file.
//   - From option group: "Filesystem"
func (c *Command) NoBatchFile() *Command {
	c.addFlag(&Flag{
		ID:   "batchfile",
		Flag: "--no-batch-file",
		Args: nil,
	})
	return c
}

// ID sets the "id" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetID], for unsetting the flag.
//   - ID maps to cli flags: --id (hidden).
//   - From option group: "Filesystem"
func (c *Command) ID() *Command {
	c.addFlag(&Flag{
		ID:   "useid",
		Flag: "--id",
		Args: nil,
	})
	return c
}

// UnsetID unsets any flags that were previously set by one of:
//   - [Command.ID]
func (c *Command) UnsetID() *Command {
	c.removeFlagByID("useid")
	return c
}

// The paths where the files should be downloaded. Specify the type of file and the
// path separated by a colon ":". All the same TYPES as --output are supported.
// Additionally, you can also provide "home" (default) and "temp" paths. All
// intermediary files are first downloaded to the temp path and then the final
// files are moved over to the home path after download is finished. This option is
// ignored if --output is an absolute path
//
// Additional information:
//   - See [Command.UnsetPaths], for unsetting the flag.
//   - Paths maps to cli flags: -P/--paths=[TYPES:]PATH.
//   - From option group: "Filesystem"
func (c *Command) Paths(path string) *Command {
	c.addFlag(&Flag{
		ID:   "paths",
		Flag: "--paths",
		Args: []string{path},
	})
	return c
}

// UnsetPaths unsets any flags that were previously set by one of:
//   - [Command.Paths]
func (c *Command) UnsetPaths() *Command {
	c.removeFlagByID("paths")
	return c
}

// Output filename template; see "OUTPUT TEMPLATE" for details
//
// References:
//   - Output Template: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#output-template
//
// Additional information:
//   - See [Command.UnsetOutput], for unsetting the flag.
//   - Output maps to cli flags: -o/--output=[TYPES:]TEMPLATE.
//   - From option group: "Filesystem"
func (c *Command) Output(template string) *Command {
	c.addFlag(&Flag{
		ID:   "outtmpl",
		Flag: "--output",
		Args: []string{template},
	})
	return c
}

// UnsetOutput unsets any flags that were previously set by one of:
//   - [Command.Output]
func (c *Command) UnsetOutput() *Command {
	c.removeFlagByID("outtmpl")
	return c
}

// Placeholder for unavailable fields in --output (default: "NA")
//
// Additional information:
//   - See [Command.UnsetOutputNaPlaceholder], for unsetting the flag.
//   - OutputNaPlaceholder maps to cli flags: --output-na-placeholder=TEXT.
//   - From option group: "Filesystem"
func (c *Command) OutputNaPlaceholder(text string) *Command {
	c.addFlag(&Flag{
		ID:   "outtmpl_na_placeholder",
		Flag: "--output-na-placeholder",
		Args: []string{text},
	})
	return c
}

// UnsetOutputNaPlaceholder unsets any flags that were previously set by one of:
//   - [Command.OutputNaPlaceholder]
func (c *Command) UnsetOutputNaPlaceholder() *Command {
	c.removeFlagByID("outtmpl_na_placeholder")
	return c
}

// AutoNumberSize sets the "autonumber-size" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetAutoNumberSize], for unsetting the flag.
//   - AutoNumberSize maps to cli flags: --autonumber-size=NUMBER (hidden).
//   - From option group: "Filesystem"
func (c *Command) AutoNumberSize(number int) *Command {
	c.addFlag(&Flag{
		ID:   "autonumber_size",
		Flag: "--autonumber-size",
		Args: []string{
			strconv.Itoa(number),
		},
	})
	return c
}

// UnsetAutoNumberSize unsets any flags that were previously set by one of:
//   - [Command.AutoNumberSize]
func (c *Command) UnsetAutoNumberSize() *Command {
	c.removeFlagByID("autonumber_size")
	return c
}

// AutoNumberStart sets the "autonumber-start" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetAutoNumberStart], for unsetting the flag.
//   - AutoNumberStart maps to cli flags: --autonumber-start=NUMBER (hidden).
//   - From option group: "Filesystem"
func (c *Command) AutoNumberStart(number int) *Command {
	c.addFlag(&Flag{
		ID:   "autonumber_start",
		Flag: "--autonumber-start",
		Args: []string{
			strconv.Itoa(number),
		},
	})
	return c
}

// UnsetAutoNumberStart unsets any flags that were previously set by one of:
//   - [Command.AutoNumberStart]
func (c *Command) UnsetAutoNumberStart() *Command {
	c.removeFlagByID("autonumber_start")
	return c
}

// Restrict filenames to only ASCII characters, and avoid "&" and spaces in
// filenames
//
// Additional information:
//   - See [Command.UnsetRestrictFilenames], for unsetting the flag.
//   - RestrictFilenames maps to cli flags: --restrict-filenames.
//   - From option group: "Filesystem"
func (c *Command) RestrictFilenames() *Command {
	c.addFlag(&Flag{
		ID:   "restrictfilenames",
		Flag: "--restrict-filenames",
		Args: nil,
	})
	return c
}

// UnsetRestrictFilenames unsets any flags that were previously set by one of:
//   - [Command.RestrictFilenames]
//   - [Command.NoRestrictFilenames]
func (c *Command) UnsetRestrictFilenames() *Command {
	c.removeFlagByID("restrictfilenames")
	return c
}

// Allow Unicode characters, "&" and spaces in filenames (default)
//
// Additional information:
//   - See [Command.UnsetRestrictFilenames], for unsetting the flag.
//   - NoRestrictFilenames maps to cli flags: --no-restrict-filenames.
//   - From option group: "Filesystem"
func (c *Command) NoRestrictFilenames() *Command {
	c.addFlag(&Flag{
		ID:   "restrictfilenames",
		Flag: "--no-restrict-filenames",
		Args: nil,
	})
	return c
}

// Force filenames to be Windows-compatible
//
// Additional information:
//   - See [Command.UnsetWindowsFilenames], for unsetting the flag.
//   - WindowsFilenames maps to cli flags: --windows-filenames.
//   - From option group: "Filesystem"
func (c *Command) WindowsFilenames() *Command {
	c.addFlag(&Flag{
		ID:   "windowsfilenames",
		Flag: "--windows-filenames",
		Args: nil,
	})
	return c
}

// UnsetWindowsFilenames unsets any flags that were previously set by one of:
//   - [Command.WindowsFilenames]
//   - [Command.NoWindowsFilenames]
func (c *Command) UnsetWindowsFilenames() *Command {
	c.removeFlagByID("windowsfilenames")
	return c
}

// Make filenames Windows-compatible only if using Windows (default)
//
// Additional information:
//   - See [Command.UnsetWindowsFilenames], for unsetting the flag.
//   - NoWindowsFilenames maps to cli flags: --no-windows-filenames.
//   - From option group: "Filesystem"
func (c *Command) NoWindowsFilenames() *Command {
	c.addFlag(&Flag{
		ID:   "windowsfilenames",
		Flag: "--no-windows-filenames",
		Args: nil,
	})
	return c
}

// Limit the filename length (excluding extension) to the specified number of
// characters
//
// Additional information:
//   - See [Command.UnsetTrimFilenames], for unsetting the flag.
//   - TrimFilenames maps to cli flags: --trim-filenames/--trim-file-names=LENGTH.
//   - From option group: "Filesystem"
func (c *Command) TrimFilenames(length int) *Command {
	c.addFlag(&Flag{
		ID:   "trim_file_name",
		Flag: "--trim-filenames",
		Args: []string{
			strconv.Itoa(length),
		},
	})
	return c
}

// UnsetTrimFilenames unsets any flags that were previously set by one of:
//   - [Command.TrimFilenames]
func (c *Command) UnsetTrimFilenames() *Command {
	c.removeFlagByID("trim_file_name")
	return c
}

// Do not overwrite any files
//
// Additional information:
//   - See [Command.UnsetOverwrites], for unsetting the flag.
//   - NoOverwrites maps to cli flags: -w/--no-overwrites.
//   - From option group: "Filesystem"
func (c *Command) NoOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "overwrites",
		Flag: "--no-overwrites",
		Args: nil,
	})
	return c
}

// UnsetOverwrites unsets any flags that were previously set by one of:
//   - [Command.NoOverwrites]
func (c *Command) UnsetOverwrites() *Command {
	c.removeFlagByID("overwrites")
	return c
}

// Overwrite all video and metadata files. This option includes --no-continue
//
// Additional information:
//   - See [Command.UnsetForceOverwrites], for unsetting the flag.
//   - ForceOverwrites maps to cli flags: --force-overwrites/--yes-overwrites.
//   - From option group: "Filesystem"
func (c *Command) ForceOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "overwrites",
		Flag: "--force-overwrites",
		Args: nil,
	})
	return c
}

// UnsetForceOverwrites unsets any flags that were previously set by one of:
//   - [Command.ForceOverwrites]
//   - [Command.NoForceOverwrites]
func (c *Command) UnsetForceOverwrites() *Command {
	c.removeFlagByID("overwrites")
	return c
}

// Do not overwrite the video, but overwrite related files (default)
//
// Additional information:
//   - See [Command.UnsetForceOverwrites], for unsetting the flag.
//   - NoForceOverwrites maps to cli flags: --no-force-overwrites.
//   - From option group: "Filesystem"
func (c *Command) NoForceOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "overwrites",
		Flag: "--no-force-overwrites",
		Args: nil,
	})
	return c
}

// Resume partially downloaded files/fragments (default)
//
// Additional information:
//   - See [Command.UnsetContinue], for unsetting the flag.
//   - Continue maps to cli flags: -c/--continue.
//   - From option group: "Filesystem"
func (c *Command) Continue() *Command {
	c.addFlag(&Flag{
		ID:   "continue_dl",
		Flag: "--continue",
		Args: nil,
	})
	return c
}

// UnsetContinue unsets any flags that were previously set by one of:
//   - [Command.Continue]
//   - [Command.NoContinue]
func (c *Command) UnsetContinue() *Command {
	c.removeFlagByID("continue_dl")
	return c
}

// Do not resume partially downloaded fragments. If the file is not fragmented,
// restart download of the entire file
//
// Additional information:
//   - See [Command.UnsetContinue], for unsetting the flag.
//   - NoContinue maps to cli flags: --no-continue.
//   - From option group: "Filesystem"
func (c *Command) NoContinue() *Command {
	c.addFlag(&Flag{
		ID:   "continue_dl",
		Flag: "--no-continue",
		Args: nil,
	})
	return c
}

// Use .part files instead of writing directly into output file (default)
//
// Additional information:
//   - See [Command.UnsetPart], for unsetting the flag.
//   - Part maps to cli flags: --part.
//   - From option group: "Filesystem"
func (c *Command) Part() *Command {
	c.addFlag(&Flag{
		ID:   "nopart",
		Flag: "--part",
		Args: nil,
	})
	return c
}

// UnsetPart unsets any flags that were previously set by one of:
//   - [Command.Part]
//   - [Command.NoPart]
func (c *Command) UnsetPart() *Command {
	c.removeFlagByID("nopart")
	return c
}

// Do not use .part files - write directly into output file
//
// Additional information:
//   - See [Command.UnsetPart], for unsetting the flag.
//   - NoPart maps to cli flags: --no-part.
//   - From option group: "Filesystem"
func (c *Command) NoPart() *Command {
	c.addFlag(&Flag{
		ID:   "nopart",
		Flag: "--no-part",
		Args: nil,
	})
	return c
}

// Use the Last-modified header to set the file modification time (default)
//
// Additional information:
//   - See [Command.UnsetMtime], for unsetting the flag.
//   - Mtime maps to cli flags: --mtime.
//   - From option group: "Filesystem"
func (c *Command) Mtime() *Command {
	c.addFlag(&Flag{
		ID:   "updatetime",
		Flag: "--mtime",
		Args: nil,
	})
	return c
}

// UnsetMtime unsets any flags that were previously set by one of:
//   - [Command.Mtime]
//   - [Command.NoMtime]
func (c *Command) UnsetMtime() *Command {
	c.removeFlagByID("updatetime")
	return c
}

// Do not use the Last-modified header to set the file modification time
//
// Additional information:
//   - See [Command.UnsetMtime], for unsetting the flag.
//   - NoMtime maps to cli flags: --no-mtime.
//   - From option group: "Filesystem"
func (c *Command) NoMtime() *Command {
	c.addFlag(&Flag{
		ID:   "updatetime",
		Flag: "--no-mtime",
		Args: nil,
	})
	return c
}

// Write video description to a .description file
//
// Additional information:
//   - See [Command.UnsetWriteDescription], for unsetting the flag.
//   - WriteDescription maps to cli flags: --write-description.
//   - From option group: "Filesystem"
func (c *Command) WriteDescription() *Command {
	c.addFlag(&Flag{
		ID:   "writedescription",
		Flag: "--write-description",
		Args: nil,
	})
	return c
}

// UnsetWriteDescription unsets any flags that were previously set by one of:
//   - [Command.WriteDescription]
//   - [Command.NoWriteDescription]
func (c *Command) UnsetWriteDescription() *Command {
	c.removeFlagByID("writedescription")
	return c
}

// Do not write video description (default)
//
// Additional information:
//   - See [Command.UnsetWriteDescription], for unsetting the flag.
//   - NoWriteDescription maps to cli flags: --no-write-description.
//   - From option group: "Filesystem"
func (c *Command) NoWriteDescription() *Command {
	c.addFlag(&Flag{
		ID:   "writedescription",
		Flag: "--no-write-description",
		Args: nil,
	})
	return c
}

// Write video metadata to a .info.json file (this may contain personal
// information)
//
// Additional information:
//   - See [Command.UnsetWriteInfoJSON], for unsetting the flag.
//   - WriteInfoJSON maps to cli flags: --write-info-json.
//   - From option group: "Filesystem"
func (c *Command) WriteInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "writeinfojson",
		Flag: "--write-info-json",
		Args: nil,
	})
	return c
}

// UnsetWriteInfoJSON unsets any flags that were previously set by one of:
//   - [Command.WriteInfoJSON]
//   - [Command.NoWriteInfoJSON]
func (c *Command) UnsetWriteInfoJSON() *Command {
	c.removeFlagByID("writeinfojson")
	return c
}

// Do not write video metadata (default)
//
// Additional information:
//   - See [Command.UnsetWriteInfoJSON], for unsetting the flag.
//   - NoWriteInfoJSON maps to cli flags: --no-write-info-json.
//   - From option group: "Filesystem"
func (c *Command) NoWriteInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "writeinfojson",
		Flag: "--no-write-info-json",
		Args: nil,
	})
	return c
}

// WriteAnnotations sets the "write-annotations" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetWriteAnnotations], for unsetting the flag.
//   - WriteAnnotations maps to cli flags: --write-annotations (hidden).
//   - From option group: "Filesystem"
//
// Deprecated: No supported site has annotations now.
func (c *Command) WriteAnnotations() *Command {
	c.addFlag(&Flag{
		ID:   "writeannotations",
		Flag: "--write-annotations",
		Args: nil,
	})
	return c
}

// UnsetWriteAnnotations unsets any flags that were previously set by one of:
//   - [Command.WriteAnnotations]
//   - [Command.NoWriteAnnotations]
//
// Deprecated: No supported site has annotations now.
func (c *Command) UnsetWriteAnnotations() *Command {
	c.removeFlagByID("writeannotations")
	return c
}

// NoWriteAnnotations sets the "no-write-annotations" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetWriteAnnotations], for unsetting the flag.
//   - NoWriteAnnotations maps to cli flags: --no-write-annotations (hidden).
//   - From option group: "Filesystem"
//
// Deprecated: This flag is now default in yt-dlp.
func (c *Command) NoWriteAnnotations() *Command {
	c.addFlag(&Flag{
		ID:   "writeannotations",
		Flag: "--no-write-annotations",
		Args: nil,
	})
	return c
}

// Write playlist metadata in addition to the video metadata when using
// --write-info-json, --write-description etc. (default)
//
// Additional information:
//   - See [Command.UnsetWritePlaylistMetafiles], for unsetting the flag.
//   - WritePlaylistMetafiles maps to cli flags: --write-playlist-metafiles.
//   - From option group: "Filesystem"
func (c *Command) WritePlaylistMetafiles() *Command {
	c.addFlag(&Flag{
		ID:   "allow_playlist_files",
		Flag: "--write-playlist-metafiles",
		Args: nil,
	})
	return c
}

// UnsetWritePlaylistMetafiles unsets any flags that were previously set by one of:
//   - [Command.WritePlaylistMetafiles]
//   - [Command.NoWritePlaylistMetafiles]
func (c *Command) UnsetWritePlaylistMetafiles() *Command {
	c.removeFlagByID("allow_playlist_files")
	return c
}

// Do not write playlist metadata when using --write-info-json, --write-description
// etc.
//
// Additional information:
//   - See [Command.UnsetWritePlaylistMetafiles], for unsetting the flag.
//   - NoWritePlaylistMetafiles maps to cli flags: --no-write-playlist-metafiles.
//   - From option group: "Filesystem"
func (c *Command) NoWritePlaylistMetafiles() *Command {
	c.addFlag(&Flag{
		ID:   "allow_playlist_files",
		Flag: "--no-write-playlist-metafiles",
		Args: nil,
	})
	return c
}

// Remove some internal metadata such as filenames from the infojson (default)
//
// Additional information:
//   - See [Command.UnsetCleanInfoJSON], for unsetting the flag.
//   - CleanInfoJSON maps to cli flags: --clean-info-json/--clean-infojson.
//   - From option group: "Filesystem"
func (c *Command) CleanInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "clean_infojson",
		Flag: "--clean-info-json",
		Args: nil,
	})
	return c
}

// UnsetCleanInfoJSON unsets any flags that were previously set by one of:
//   - [Command.CleanInfoJSON]
//   - [Command.NoCleanInfoJSON]
func (c *Command) UnsetCleanInfoJSON() *Command {
	c.removeFlagByID("clean_infojson")
	return c
}

// Write all fields to the infojson
//
// Additional information:
//   - See [Command.UnsetCleanInfoJSON], for unsetting the flag.
//   - NoCleanInfoJSON maps to cli flags: --no-clean-info-json/--no-clean-infojson.
//   - From option group: "Filesystem"
func (c *Command) NoCleanInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "clean_infojson",
		Flag: "--no-clean-info-json",
		Args: nil,
	})
	return c
}

// Retrieve video comments to be placed in the infojson. The comments are fetched
// even without this option if the extraction is known to be quick
//
// Additional information:
//   - See [Command.UnsetWriteComments], for unsetting the flag.
//   - WriteComments maps to cli flags: --write-comments/--get-comments.
//   - From option group: "Filesystem"
func (c *Command) WriteComments() *Command {
	c.addFlag(&Flag{
		ID:   "getcomments",
		Flag: "--write-comments",
		Args: nil,
	})
	return c
}

// UnsetWriteComments unsets any flags that were previously set by one of:
//   - [Command.WriteComments]
//   - [Command.NoWriteComments]
func (c *Command) UnsetWriteComments() *Command {
	c.removeFlagByID("getcomments")
	return c
}

// Do not retrieve video comments unless the extraction is known to be quick
//
// Additional information:
//   - See [Command.UnsetWriteComments], for unsetting the flag.
//   - NoWriteComments maps to cli flags: --no-write-comments/--no-get-comments.
//   - From option group: "Filesystem"
func (c *Command) NoWriteComments() *Command {
	c.addFlag(&Flag{
		ID:   "getcomments",
		Flag: "--no-write-comments",
		Args: nil,
	})
	return c
}

// JSON file containing the video information (created with the "--write-info-json"
// option)
//
// Additional information:
//   - See [Command.UnsetLoadInfoJSON], for unsetting the flag.
//   - LoadInfoJSON maps to cli flags: --load-info-json/--load-info=FILE.
//   - From option group: "Filesystem"
func (c *Command) LoadInfoJSON(file string) *Command {
	c.addFlag(&Flag{
		ID:   "load_info_filename",
		Flag: "--load-info-json",
		Args: []string{file},
	})
	return c
}

// UnsetLoadInfoJSON unsets any flags that were previously set by one of:
//   - [Command.LoadInfoJSON]
func (c *Command) UnsetLoadInfoJSON() *Command {
	c.removeFlagByID("load_info_filename")
	return c
}

// Netscape formatted file to read cookies from and dump cookie jar in
//
// Additional information:
//   - See [Command.UnsetCookies], for unsetting the flag.
//   - Cookies maps to cli flags: --cookies=FILE.
//   - From option group: "Filesystem"
func (c *Command) Cookies(file string) *Command {
	c.addFlag(&Flag{
		ID:   "cookiefile",
		Flag: "--cookies",
		Args: []string{file},
	})
	return c
}

// UnsetCookies unsets any flags that were previously set by one of:
//   - [Command.Cookies]
//   - [Command.NoCookies]
func (c *Command) UnsetCookies() *Command {
	c.removeFlagByID("cookiefile")
	return c
}

// Do not read/dump cookies from/to file (default)
//
// Additional information:
//   - See [Command.UnsetCookies], for unsetting the flag.
//   - NoCookies maps to cli flags: --no-cookies=FILE.
//   - From option group: "Filesystem"
func (c *Command) NoCookies() *Command {
	c.addFlag(&Flag{
		ID:   "cookiefile",
		Flag: "--no-cookies",
		Args: nil,
	})
	return c
}

// The name of the browser to load cookies from. Currently supported browsers are:
// brave, chrome, chromium, edge, firefox, opera, safari, vivaldi, whale.
// Optionally, the KEYRING used for decrypting Chromium cookies on Linux, the
// name/path of the PROFILE to load cookies from, and the CONTAINER name (if
// Firefox) ("none" for no container) can be given with their respective
// separators. By default, all containers of the most recently accessed profile are
// used. Currently supported keyrings are: basictext, gnomekeyring, kwallet,
// kwallet5, kwallet6
//
// Additional information:
//   - See [Command.UnsetCookiesFromBrowser], for unsetting the flag.
//   - CookiesFromBrowser maps to cli flags: --cookies-from-browser=BROWSER[+KEYRING][:PROFILE][::CONTAINER].
//   - From option group: "Filesystem"
func (c *Command) CookiesFromBrowser(browser string) *Command {
	c.addFlag(&Flag{
		ID:   "cookiesfrombrowser",
		Flag: "--cookies-from-browser",
		Args: []string{browser},
	})
	return c
}

// UnsetCookiesFromBrowser unsets any flags that were previously set by one of:
//   - [Command.CookiesFromBrowser]
//   - [Command.NoCookiesFromBrowser]
func (c *Command) UnsetCookiesFromBrowser() *Command {
	c.removeFlagByID("cookiesfrombrowser")
	return c
}

// Do not load cookies from browser (default)
//
// Additional information:
//   - See [Command.UnsetCookiesFromBrowser], for unsetting the flag.
//   - NoCookiesFromBrowser maps to cli flags: --no-cookies-from-browser.
//   - From option group: "Filesystem"
func (c *Command) NoCookiesFromBrowser() *Command {
	c.addFlag(&Flag{
		ID:   "cookiesfrombrowser",
		Flag: "--no-cookies-from-browser",
		Args: nil,
	})
	return c
}

// Location in the filesystem where yt-dlp can store some downloaded information
// (such as client ids and signatures) permanently. By default
// ${XDG_CACHE_HOME}/yt-dlp
//
// Additional information:
//   - See [Command.UnsetCacheDir], for unsetting the flag.
//   - CacheDir maps to cli flags: --cache-dir=DIR.
//   - From option group: "Filesystem"
func (c *Command) CacheDir(dir string) *Command {
	c.addFlag(&Flag{
		ID:   "cachedir",
		Flag: "--cache-dir",
		Args: []string{dir},
	})
	return c
}

// UnsetCacheDir unsets any flags that were previously set by one of:
//   - [Command.CacheDir]
//   - [Command.NoCacheDir]
func (c *Command) UnsetCacheDir() *Command {
	c.removeFlagByID("cachedir")
	return c
}

// Disable filesystem caching
//
// Additional information:
//   - See [Command.UnsetCacheDir], for unsetting the flag.
//   - NoCacheDir maps to cli flags: --no-cache-dir.
//   - From option group: "Filesystem"
func (c *Command) NoCacheDir() *Command {
	c.addFlag(&Flag{
		ID:   "cachedir",
		Flag: "--no-cache-dir",
		Args: nil,
	})
	return c
}

// Delete all filesystem cache files
//
// Additional information:
//   - See [Command.UnsetRmCacheDir], for unsetting the flag.
//   - RmCacheDir maps to cli flags: --rm-cache-dir.
//   - From option group: "Filesystem"
func (c *Command) RmCacheDir() *Command {
	c.addFlag(&Flag{
		ID:   "rm_cachedir",
		Flag: "--rm-cache-dir",
		Args: nil,
	})
	return c
}

// UnsetRmCacheDir unsets any flags that were previously set by one of:
//   - [Command.RmCacheDir]
func (c *Command) UnsetRmCacheDir() *Command {
	c.removeFlagByID("rm_cachedir")
	return c
}

// Write thumbnail image to disk
//
// Additional information:
//   - See [Command.UnsetWriteThumbnail], for unsetting the flag.
//   - WriteThumbnail maps to cli flags: --write-thumbnail.
//   - From option group: "Thumbnail"
func (c *Command) WriteThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "writethumbnail",
		Flag: "--write-thumbnail",
		Args: nil,
	})
	return c
}

// UnsetWriteThumbnail unsets any flags that were previously set by one of:
//   - [Command.WriteThumbnail]
//   - [Command.NoWriteThumbnail]
func (c *Command) UnsetWriteThumbnail() *Command {
	c.removeFlagByID("writethumbnail")
	return c
}

// Do not write thumbnail image to disk (default)
//
// Additional information:
//   - See [Command.UnsetWriteThumbnail], for unsetting the flag.
//   - NoWriteThumbnail maps to cli flags: --no-write-thumbnail.
//   - From option group: "Thumbnail"
func (c *Command) NoWriteThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "writethumbnail",
		Flag: "--no-write-thumbnail",
		Args: nil,
	})
	return c
}

// Write all thumbnail image formats to disk
//
// Additional information:
//   - See [Command.UnsetWriteAllThumbnails], for unsetting the flag.
//   - WriteAllThumbnails maps to cli flags: --write-all-thumbnails.
//   - From option group: "Thumbnail"
func (c *Command) WriteAllThumbnails() *Command {
	c.addFlag(&Flag{
		ID:   "writethumbnail",
		Flag: "--write-all-thumbnails",
		Args: nil,
	})
	return c
}

// UnsetWriteAllThumbnails unsets any flags that were previously set by one of:
//   - [Command.WriteAllThumbnails]
func (c *Command) UnsetWriteAllThumbnails() *Command {
	c.removeFlagByID("writethumbnail")
	return c
}

// List available thumbnails of each video. Simulate unless --no-simulate is used
//
// Additional information:
//   - See [Command.UnsetListThumbnails], for unsetting the flag.
//   - ListThumbnails maps to cli flags: --list-thumbnails.
//   - From option group: "Thumbnail"
func (c *Command) ListThumbnails() *Command {
	c.addFlag(&Flag{
		ID:   "list_thumbnails",
		Flag: "--list-thumbnails",
		Args: nil,
	})
	return c
}

// UnsetListThumbnails unsets any flags that were previously set by one of:
//   - [Command.ListThumbnails]
func (c *Command) UnsetListThumbnails() *Command {
	c.removeFlagByID("list_thumbnails")
	return c
}

// Write an internet shortcut file, depending on the current platform (.url,
// .webloc or .desktop). The URL may be cached by the OS
//
// Additional information:
//   - See [Command.UnsetWriteLink], for unsetting the flag.
//   - WriteLink maps to cli flags: --write-link.
//   - From option group: "Internet Shortcut"
func (c *Command) WriteLink() *Command {
	c.addFlag(&Flag{
		ID:   "writelink",
		Flag: "--write-link",
		Args: nil,
	})
	return c
}

// UnsetWriteLink unsets any flags that were previously set by one of:
//   - [Command.WriteLink]
func (c *Command) UnsetWriteLink() *Command {
	c.removeFlagByID("writelink")
	return c
}

// Write a .url Windows internet shortcut. The OS caches the URL based on the file
// path
//
// Additional information:
//   - See [Command.UnsetWriteURLLink], for unsetting the flag.
//   - WriteURLLink maps to cli flags: --write-url-link.
//   - From option group: "Internet Shortcut"
func (c *Command) WriteURLLink() *Command {
	c.addFlag(&Flag{
		ID:   "writeurllink",
		Flag: "--write-url-link",
		Args: nil,
	})
	return c
}

// UnsetWriteURLLink unsets any flags that were previously set by one of:
//   - [Command.WriteURLLink]
func (c *Command) UnsetWriteURLLink() *Command {
	c.removeFlagByID("writeurllink")
	return c
}

// Write a .webloc macOS internet shortcut
//
// Additional information:
//   - See [Command.UnsetWriteWeblocLink], for unsetting the flag.
//   - WriteWeblocLink maps to cli flags: --write-webloc-link.
//   - From option group: "Internet Shortcut"
func (c *Command) WriteWeblocLink() *Command {
	c.addFlag(&Flag{
		ID:   "writewebloclink",
		Flag: "--write-webloc-link",
		Args: nil,
	})
	return c
}

// UnsetWriteWeblocLink unsets any flags that were previously set by one of:
//   - [Command.WriteWeblocLink]
func (c *Command) UnsetWriteWeblocLink() *Command {
	c.removeFlagByID("writewebloclink")
	return c
}

// Write a .desktop Linux internet shortcut
//
// Additional information:
//   - See [Command.UnsetWriteDesktopLink], for unsetting the flag.
//   - WriteDesktopLink maps to cli flags: --write-desktop-link.
//   - From option group: "Internet Shortcut"
func (c *Command) WriteDesktopLink() *Command {
	c.addFlag(&Flag{
		ID:   "writedesktoplink",
		Flag: "--write-desktop-link",
		Args: nil,
	})
	return c
}

// UnsetWriteDesktopLink unsets any flags that were previously set by one of:
//   - [Command.WriteDesktopLink]
func (c *Command) UnsetWriteDesktopLink() *Command {
	c.removeFlagByID("writedesktoplink")
	return c
}

// Activate quiet mode. If used with --verbose, print the log to stderr
//
// Additional information:
//   - See [Command.UnsetQuiet], for unsetting the flag.
//   - Quiet maps to cli flags: -q/--quiet.
//   - From option group: "Verbosity Simulation"
func (c *Command) Quiet() *Command {
	c.addFlag(&Flag{
		ID:   "quiet",
		Flag: "--quiet",
		Args: nil,
	})
	return c
}

// UnsetQuiet unsets any flags that were previously set by one of:
//   - [Command.Quiet]
//   - [Command.NoQuiet]
func (c *Command) UnsetQuiet() *Command {
	c.removeFlagByID("quiet")
	return c
}

// Deactivate quiet mode. (Default)
//
// Additional information:
//   - See [Command.UnsetQuiet], for unsetting the flag.
//   - NoQuiet maps to cli flags: --no-quiet.
//   - From option group: "Verbosity Simulation"
func (c *Command) NoQuiet() *Command {
	c.addFlag(&Flag{
		ID:   "quiet",
		Flag: "--no-quiet",
		Args: nil,
	})
	return c
}

// Ignore warnings
//
// Additional information:
//   - See [Command.UnsetWarnings], for unsetting the flag.
//   - NoWarnings maps to cli flags: --no-warnings.
//   - From option group: "Verbosity Simulation"
func (c *Command) NoWarnings() *Command {
	c.addFlag(&Flag{
		ID:   "no_warnings",
		Flag: "--no-warnings",
		Args: nil,
	})
	return c
}

// UnsetWarnings unsets any flags that were previously set by one of:
//   - [Command.NoWarnings]
func (c *Command) UnsetWarnings() *Command {
	c.removeFlagByID("no_warnings")
	return c
}

// Do not download the video and do not write anything to disk
//
// Additional information:
//   - See [Command.UnsetSimulate], for unsetting the flag.
//   - Simulate maps to cli flags: -s/--simulate.
//   - From option group: "Verbosity Simulation"
func (c *Command) Simulate() *Command {
	c.addFlag(&Flag{
		ID:   "simulate",
		Flag: "--simulate",
		Args: nil,
	})
	return c
}

// UnsetSimulate unsets any flags that were previously set by one of:
//   - [Command.Simulate]
//   - [Command.NoSimulate]
func (c *Command) UnsetSimulate() *Command {
	c.removeFlagByID("simulate")
	return c
}

// Download the video even if printing/listing options are used
//
// Additional information:
//   - See [Command.UnsetSimulate], for unsetting the flag.
//   - NoSimulate maps to cli flags: --no-simulate.
//   - From option group: "Verbosity Simulation"
func (c *Command) NoSimulate() *Command {
	c.addFlag(&Flag{
		ID:   "simulate",
		Flag: "--no-simulate",
		Args: nil,
	})
	return c
}

// Ignore "No video formats" error. Useful for extracting metadata even if the
// videos are not actually available for download (experimental)
//
// Additional information:
//   - See [Command.UnsetIgnoreNoFormatsError], for unsetting the flag.
//   - IgnoreNoFormatsError maps to cli flags: --ignore-no-formats-error.
//   - From option group: "Verbosity Simulation"
func (c *Command) IgnoreNoFormatsError() *Command {
	c.addFlag(&Flag{
		ID:   "ignore_no_formats_error",
		Flag: "--ignore-no-formats-error",
		Args: nil,
	})
	return c
}

// UnsetIgnoreNoFormatsError unsets any flags that were previously set by one of:
//   - [Command.IgnoreNoFormatsError]
//   - [Command.NoIgnoreNoFormatsError]
func (c *Command) UnsetIgnoreNoFormatsError() *Command {
	c.removeFlagByID("ignore_no_formats_error")
	return c
}

// Throw error when no downloadable video formats are found (default)
//
// Additional information:
//   - See [Command.UnsetIgnoreNoFormatsError], for unsetting the flag.
//   - NoIgnoreNoFormatsError maps to cli flags: --no-ignore-no-formats-error.
//   - From option group: "Verbosity Simulation"
func (c *Command) NoIgnoreNoFormatsError() *Command {
	c.addFlag(&Flag{
		ID:   "ignore_no_formats_error",
		Flag: "--no-ignore-no-formats-error",
		Args: nil,
	})
	return c
}

// Do not download the video but write all related files
//
// Additional information:
//   - See [Command.UnsetSkipDownload], for unsetting the flag.
//   - SkipDownload maps to cli flags: --skip-download/--no-download.
//   - From option group: "Verbosity Simulation"
func (c *Command) SkipDownload() *Command {
	c.addFlag(&Flag{
		ID:   "skip_download",
		Flag: "--skip-download",
		Args: nil,
	})
	return c
}

// UnsetSkipDownload unsets any flags that were previously set by one of:
//   - [Command.SkipDownload]
func (c *Command) UnsetSkipDownload() *Command {
	c.removeFlagByID("skip_download")
	return c
}

// Field name or output template to print to screen, optionally prefixed with when
// to print it, separated by a ":". Supported values of "WHEN" are the same as that
// of --use-postprocessor (default: video). Implies --quiet. Implies --simulate
// unless --no-simulate or later stages of WHEN are used. This option can be used
// multiple times
//
// Additional information:
//   - See [Command.UnsetPrint], for unsetting the flag.
//   - Print maps to cli flags: -O/--print=[WHEN:]TEMPLATE.
//   - From option group: "Verbosity Simulation"
func (c *Command) Print(template string) *Command {
	c.addFlag(&Flag{
		ID:   "forceprint",
		Flag: "--print",
		Args: []string{template},
	})
	return c
}

// UnsetPrint unsets any flags that were previously set by one of:
//   - [Command.Print]
func (c *Command) UnsetPrint() *Command {
	c.removeFlagByID("forceprint")
	return c
}

// Append given template to the file. The values of WHEN and TEMPLATE are same as
// that of --print. FILE uses the same syntax as the output template. This option
// can be used multiple times
//
// Additional information:
//   - See [Command.UnsetPrintToFile], for unsetting the flag.
//   - PrintToFile maps to cli flags: --print-to-file=[WHEN:]TEMPLATE FILE.
//   - From option group: "Verbosity Simulation"
func (c *Command) PrintToFile(template, file string) *Command {
	c.addFlag(&Flag{
		ID:   "print_to_file",
		Flag: "--print-to-file",
		Args: []string{template, file},
	})
	return c
}

// UnsetPrintToFile unsets any flags that were previously set by one of:
//   - [Command.PrintToFile]
func (c *Command) UnsetPrintToFile() *Command {
	c.removeFlagByID("print_to_file")
	return c
}

// GetURL sets the "get-url" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetURL], for unsetting the flag.
//   - GetURL maps to cli flags: -g/--get-url (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetURL() *Command {
	c.addFlag(&Flag{
		ID:   "geturl",
		Flag: "--get-url",
		Args: nil,
	})
	return c
}

// UnsetGetURL unsets any flags that were previously set by one of:
//   - [Command.GetURL]
func (c *Command) UnsetGetURL() *Command {
	c.removeFlagByID("geturl")
	return c
}

// GetTitle sets the "get-title" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetTitle], for unsetting the flag.
//   - GetTitle maps to cli flags: -e/--get-title (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetTitle() *Command {
	c.addFlag(&Flag{
		ID:   "gettitle",
		Flag: "--get-title",
		Args: nil,
	})
	return c
}

// UnsetGetTitle unsets any flags that were previously set by one of:
//   - [Command.GetTitle]
func (c *Command) UnsetGetTitle() *Command {
	c.removeFlagByID("gettitle")
	return c
}

// GetID sets the "get-id" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetID], for unsetting the flag.
//   - GetID maps to cli flags: --get-id (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetID() *Command {
	c.addFlag(&Flag{
		ID:   "getid",
		Flag: "--get-id",
		Args: nil,
	})
	return c
}

// UnsetGetID unsets any flags that were previously set by one of:
//   - [Command.GetID]
func (c *Command) UnsetGetID() *Command {
	c.removeFlagByID("getid")
	return c
}

// GetThumbnail sets the "get-thumbnail" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetThumbnail], for unsetting the flag.
//   - GetThumbnail maps to cli flags: --get-thumbnail (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "getthumbnail",
		Flag: "--get-thumbnail",
		Args: nil,
	})
	return c
}

// UnsetGetThumbnail unsets any flags that were previously set by one of:
//   - [Command.GetThumbnail]
func (c *Command) UnsetGetThumbnail() *Command {
	c.removeFlagByID("getthumbnail")
	return c
}

// GetDescription sets the "get-description" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetDescription], for unsetting the flag.
//   - GetDescription maps to cli flags: --get-description (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetDescription() *Command {
	c.addFlag(&Flag{
		ID:   "getdescription",
		Flag: "--get-description",
		Args: nil,
	})
	return c
}

// UnsetGetDescription unsets any flags that were previously set by one of:
//   - [Command.GetDescription]
func (c *Command) UnsetGetDescription() *Command {
	c.removeFlagByID("getdescription")
	return c
}

// GetDuration sets the "get-duration" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetDuration], for unsetting the flag.
//   - GetDuration maps to cli flags: --get-duration (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetDuration() *Command {
	c.addFlag(&Flag{
		ID:   "getduration",
		Flag: "--get-duration",
		Args: nil,
	})
	return c
}

// UnsetGetDuration unsets any flags that were previously set by one of:
//   - [Command.GetDuration]
func (c *Command) UnsetGetDuration() *Command {
	c.removeFlagByID("getduration")
	return c
}

// GetFilename sets the "get-filename" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetFilename], for unsetting the flag.
//   - GetFilename maps to cli flags: --get-filename (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetFilename() *Command {
	c.addFlag(&Flag{
		ID:   "getfilename",
		Flag: "--get-filename",
		Args: nil,
	})
	return c
}

// UnsetGetFilename unsets any flags that were previously set by one of:
//   - [Command.GetFilename]
func (c *Command) UnsetGetFilename() *Command {
	c.removeFlagByID("getfilename")
	return c
}

// GetFormat sets the "get-format" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetGetFormat], for unsetting the flag.
//   - GetFormat maps to cli flags: --get-format (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) GetFormat() *Command {
	c.addFlag(&Flag{
		ID:   "getformat",
		Flag: "--get-format",
		Args: nil,
	})
	return c
}

// UnsetGetFormat unsets any flags that were previously set by one of:
//   - [Command.GetFormat]
func (c *Command) UnsetGetFormat() *Command {
	c.removeFlagByID("getformat")
	return c
}

// Quiet, but print JSON information for each video. Simulate unless --no-simulate
// is used. See "OUTPUT TEMPLATE" for a description of available keys
//
// References:
//   - Output Template: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#output-template
//
// Additional information:
//   - See [Command.UnsetDumpJSON], for unsetting the flag.
//   - DumpJSON maps to cli flags: -j/--dump-json.
//   - From option group: "Verbosity Simulation"
func (c *Command) DumpJSON() *Command {
	c.addFlag(&Flag{
		ID:   "dumpjson",
		Flag: "--dump-json",
		Args: nil,
	})
	return c
}

// UnsetDumpJSON unsets any flags that were previously set by one of:
//   - [Command.DumpJSON]
func (c *Command) UnsetDumpJSON() *Command {
	c.removeFlagByID("dumpjson")
	return c
}

// Quiet, but print JSON information for each url or infojson passed. Simulate
// unless --no-simulate is used. If the URL refers to a playlist, the whole
// playlist information is dumped in a single line
//
// Additional information:
//   - See [Command.UnsetDumpSingleJSON], for unsetting the flag.
//   - DumpSingleJSON maps to cli flags: -J/--dump-single-json.
//   - From option group: "Verbosity Simulation"
func (c *Command) DumpSingleJSON() *Command {
	c.addFlag(&Flag{
		ID:   "dump_single_json",
		Flag: "--dump-single-json",
		Args: nil,
	})
	return c
}

// UnsetDumpSingleJSON unsets any flags that were previously set by one of:
//   - [Command.DumpSingleJSON]
func (c *Command) UnsetDumpSingleJSON() *Command {
	c.removeFlagByID("dump_single_json")
	return c
}

// PrintJSON sets the "print-json" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPrintJSON], for unsetting the flag.
//   - PrintJSON maps to cli flags: --print-json (hidden).
//   - From option group: "Verbosity Simulation"
func (c *Command) PrintJSON() *Command {
	c.addFlag(&Flag{
		ID:   "print_json",
		Flag: "--print-json",
		Args: nil,
	})
	return c
}

// UnsetPrintJSON unsets any flags that were previously set by one of:
//   - [Command.PrintJSON]
func (c *Command) UnsetPrintJSON() *Command {
	c.removeFlagByID("print_json")
	return c
}

// Force download archive entries to be written as far as no errors occur, even if
// -s or another simulation option is used
//
// Additional information:
//   - See [Command.UnsetForceWriteArchive], for unsetting the flag.
//   - ForceWriteArchive maps to cli flags: --force-write-archive/--force-write-download-archive/--force-download-archive.
//   - From option group: "Verbosity Simulation"
func (c *Command) ForceWriteArchive() *Command {
	c.addFlag(&Flag{
		ID:   "force_write_download_archive",
		Flag: "--force-write-archive",
		Args: nil,
	})
	return c
}

// UnsetForceWriteArchive unsets any flags that were previously set by one of:
//   - [Command.ForceWriteArchive]
func (c *Command) UnsetForceWriteArchive() *Command {
	c.removeFlagByID("force_write_download_archive")
	return c
}

// Output progress bar as new lines
//
// Additional information:
//   - See [Command.UnsetNewline], for unsetting the flag.
//   - Newline maps to cli flags: --newline.
//   - From option group: "Verbosity Simulation"
func (c *Command) Newline() *Command {
	c.addFlag(&Flag{
		ID:   "progress_with_newline",
		Flag: "--newline",
		Args: nil,
	})
	return c
}

// UnsetNewline unsets any flags that were previously set by one of:
//   - [Command.Newline]
func (c *Command) UnsetNewline() *Command {
	c.removeFlagByID("progress_with_newline")
	return c
}

// Do not print progress bar
//
// Additional information:
//   - See [Command.UnsetProgress], for unsetting the flag.
//   - NoProgress maps to cli flags: --no-progress.
//   - From option group: "Verbosity Simulation"
func (c *Command) NoProgress() *Command {
	c.addFlag(&Flag{
		ID:   "noprogress",
		Flag: "--no-progress",
		Args: nil,
	})
	return c
}

// UnsetProgress unsets any flags that were previously set by one of:
//   - [Command.NoProgress]
//   - [Command.Progress]
func (c *Command) UnsetProgress() *Command {
	c.removeFlagByID("noprogress")
	return c
}

// Show progress bar, even if in quiet mode
//
// Additional information:
//   - See [Command.UnsetProgress], for unsetting the flag.
//   - Progress maps to cli flags: --progress.
//   - From option group: "Verbosity Simulation"
func (c *Command) Progress() *Command {
	c.addFlag(&Flag{
		ID:   "noprogress",
		Flag: "--progress",
		Args: nil,
	})
	return c
}

// Display progress in console titlebar
//
// Additional information:
//   - See [Command.UnsetConsoleTitle], for unsetting the flag.
//   - ConsoleTitle maps to cli flags: --console-title.
//   - From option group: "Verbosity Simulation"
func (c *Command) ConsoleTitle() *Command {
	c.addFlag(&Flag{
		ID:   "consoletitle",
		Flag: "--console-title",
		Args: nil,
	})
	return c
}

// UnsetConsoleTitle unsets any flags that were previously set by one of:
//   - [Command.ConsoleTitle]
func (c *Command) UnsetConsoleTitle() *Command {
	c.removeFlagByID("consoletitle")
	return c
}

// Template for progress outputs, optionally prefixed with one of "download:"
// (default), "download-title:" (the console title), "postprocess:",  or
// "postprocess-title:". The video's fields are accessible under the "info" key and
// the progress attributes are accessible under "progress" key. E.g.
// --console-title --progress-template
// "download-title:%(info.id)s-%(progress.eta)s"
//
// Additional information:
//   - See [Command.UnsetProgressTemplate], for unsetting the flag.
//   - ProgressTemplate maps to cli flags: --progress-template=[TYPES:]TEMPLATE.
//   - From option group: "Verbosity Simulation"
func (c *Command) ProgressTemplate(template string) *Command {
	c.addFlag(&Flag{
		ID:   "progress_template",
		Flag: "--progress-template",
		Args: []string{template},
	})
	return c
}

// UnsetProgressTemplate unsets any flags that were previously set by one of:
//   - [Command.ProgressTemplate]
func (c *Command) UnsetProgressTemplate() *Command {
	c.removeFlagByID("progress_template")
	return c
}

// Time between progress output (default: 0)
//
// Additional information:
//   - See [Command.UnsetProgressDelta], for unsetting the flag.
//   - ProgressDelta maps to cli flags: --progress-delta=SECONDS.
//   - From option group: "Verbosity Simulation"
func (c *Command) ProgressDelta(seconds float64) *Command {
	c.addFlag(&Flag{
		ID:   "progress_delta",
		Flag: "--progress-delta",
		Args: []string{
			strconv.FormatFloat(seconds, 'g', -1, 64),
		},
	})
	return c
}

// UnsetProgressDelta unsets any flags that were previously set by one of:
//   - [Command.ProgressDelta]
func (c *Command) UnsetProgressDelta() *Command {
	c.removeFlagByID("progress_delta")
	return c
}

// Print various debugging information
//
// Additional information:
//   - See [Command.UnsetVerbose], for unsetting the flag.
//   - Verbose maps to cli flags: -v/--verbose.
//   - From option group: "Verbosity Simulation"
func (c *Command) Verbose() *Command {
	c.addFlag(&Flag{
		ID:   "verbose",
		Flag: "--verbose",
		Args: nil,
	})
	return c
}

// UnsetVerbose unsets any flags that were previously set by one of:
//   - [Command.Verbose]
func (c *Command) UnsetVerbose() *Command {
	c.removeFlagByID("verbose")
	return c
}

// Print downloaded pages encoded using base64 to debug problems (very verbose)
//
// Additional information:
//   - See [Command.UnsetDumpPages], for unsetting the flag.
//   - DumpPages maps to cli flags: --dump-pages/--dump-intermediate-pages.
//   - From option group: "Verbosity Simulation"
func (c *Command) DumpPages() *Command {
	c.addFlag(&Flag{
		ID:   "dump_intermediate_pages",
		Flag: "--dump-pages",
		Args: nil,
	})
	return c
}

// UnsetDumpPages unsets any flags that were previously set by one of:
//   - [Command.DumpPages]
func (c *Command) UnsetDumpPages() *Command {
	c.removeFlagByID("dump_intermediate_pages")
	return c
}

// Write downloaded intermediary pages to files in the current directory to debug
// problems
//
// Additional information:
//   - See [Command.UnsetWritePages], for unsetting the flag.
//   - WritePages maps to cli flags: --write-pages.
//   - From option group: "Verbosity Simulation"
func (c *Command) WritePages() *Command {
	c.addFlag(&Flag{
		ID:   "write_pages",
		Flag: "--write-pages",
		Args: nil,
	})
	return c
}

// UnsetWritePages unsets any flags that were previously set by one of:
//   - [Command.WritePages]
func (c *Command) UnsetWritePages() *Command {
	c.removeFlagByID("write_pages")
	return c
}

// Display sent and read HTTP traffic
//
// Additional information:
//   - See [Command.UnsetPrintTraffic], for unsetting the flag.
//   - PrintTraffic maps to cli flags: --print-traffic/--dump-headers.
//   - From option group: "Verbosity Simulation"
func (c *Command) PrintTraffic() *Command {
	c.addFlag(&Flag{
		ID:   "debug_printtraffic",
		Flag: "--print-traffic",
		Args: nil,
	})
	return c
}

// UnsetPrintTraffic unsets any flags that were previously set by one of:
//   - [Command.PrintTraffic]
func (c *Command) UnsetPrintTraffic() *Command {
	c.removeFlagByID("debug_printtraffic")
	return c
}

// CallHome sets the "call-home" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetCallHome], for unsetting the flag.
//   - CallHome maps to cli flags: -C/--call-home (hidden).
//   - From option group: "Verbosity Simulation"
//
// Deprecated: Not implemented.
func (c *Command) CallHome() *Command {
	c.addFlag(&Flag{
		ID:   "call_home",
		Flag: "--call-home",
		Args: nil,
	})
	return c
}

// UnsetCallHome unsets any flags that were previously set by one of:
//   - [Command.CallHome]
//   - [Command.NoCallHome]
//
// Deprecated: Not implemented.
func (c *Command) UnsetCallHome() *Command {
	c.removeFlagByID("call_home")
	return c
}

// NoCallHome sets the "no-call-home" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetCallHome], for unsetting the flag.
//   - NoCallHome maps to cli flags: --no-call-home (hidden).
//   - From option group: "Verbosity Simulation"
//
// Deprecated: This flag is now default in yt-dlp.
func (c *Command) NoCallHome() *Command {
	c.addFlag(&Flag{
		ID:   "call_home",
		Flag: "--no-call-home",
		Args: nil,
	})
	return c
}

// Force the specified encoding (experimental)
//
// Additional information:
//   - See [Command.UnsetEncoding], for unsetting the flag.
//   - Encoding maps to cli flags: --encoding=ENCODING.
//   - From option group: "Workarounds"
func (c *Command) Encoding(encoding string) *Command {
	c.addFlag(&Flag{
		ID:   "encoding",
		Flag: "--encoding",
		Args: []string{encoding},
	})
	return c
}

// UnsetEncoding unsets any flags that were previously set by one of:
//   - [Command.Encoding]
func (c *Command) UnsetEncoding() *Command {
	c.removeFlagByID("encoding")
	return c
}

// Explicitly allow HTTPS connection to servers that do not support RFC 5746 secure
// renegotiation
//
// Additional information:
//   - See [Command.UnsetLegacyServerConnect], for unsetting the flag.
//   - LegacyServerConnect maps to cli flags: --legacy-server-connect.
//   - From option group: "Workarounds"
func (c *Command) LegacyServerConnect() *Command {
	c.addFlag(&Flag{
		ID:   "legacy_server_connect",
		Flag: "--legacy-server-connect",
		Args: nil,
	})
	return c
}

// UnsetLegacyServerConnect unsets any flags that were previously set by one of:
//   - [Command.LegacyServerConnect]
func (c *Command) UnsetLegacyServerConnect() *Command {
	c.removeFlagByID("legacy_server_connect")
	return c
}

// Suppress HTTPS certificate validation
//
// Additional information:
//   - See [Command.UnsetCheckCertificates], for unsetting the flag.
//   - NoCheckCertificates maps to cli flags: --no-check-certificates.
//   - From option group: "Workarounds"
func (c *Command) NoCheckCertificates() *Command {
	c.addFlag(&Flag{
		ID:   "no_check_certificate",
		Flag: "--no-check-certificates",
		Args: nil,
	})
	return c
}

// UnsetCheckCertificates unsets any flags that were previously set by one of:
//   - [Command.NoCheckCertificates]
func (c *Command) UnsetCheckCertificates() *Command {
	c.removeFlagByID("no_check_certificate")
	return c
}

// Use an unencrypted connection to retrieve information about the video (Currently
// supported only for YouTube)
//
// Additional information:
//   - See [Command.UnsetPreferInsecure], for unsetting the flag.
//   - PreferInsecure maps to cli flags: --prefer-insecure/--prefer-unsecure.
//   - From option group: "Workarounds"
func (c *Command) PreferInsecure() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_insecure",
		Flag: "--prefer-insecure",
		Args: nil,
	})
	return c
}

// UnsetPreferInsecure unsets any flags that were previously set by one of:
//   - [Command.PreferInsecure]
func (c *Command) UnsetPreferInsecure() *Command {
	c.removeFlagByID("prefer_insecure")
	return c
}

// UserAgent sets the "user-agent" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetUserAgent], for unsetting the flag.
//   - UserAgent maps to cli flags: --user-agent=UA (hidden).
//   - From option group: "Workarounds"
func (c *Command) UserAgent(ua string) *Command {
	c.addFlag(&Flag{
		ID:   "user_agent",
		Flag: "--user-agent",
		Args: []string{ua},
	})
	return c
}

// UnsetUserAgent unsets any flags that were previously set by one of:
//   - [Command.UserAgent]
func (c *Command) UnsetUserAgent() *Command {
	c.removeFlagByID("user_agent")
	return c
}

// Referer sets the "referer" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetReferer], for unsetting the flag.
//   - Referer maps to cli flags: --referer=URL (hidden).
//   - From option group: "Workarounds"
func (c *Command) Referer(url string) *Command {
	c.addFlag(&Flag{
		ID:   "referer",
		Flag: "--referer",
		Args: []string{url},
	})
	return c
}

// UnsetReferer unsets any flags that were previously set by one of:
//   - [Command.Referer]
func (c *Command) UnsetReferer() *Command {
	c.removeFlagByID("referer")
	return c
}

// Specify a custom HTTP header and its value, separated by a colon ":". You can
// use this option multiple times
//
// Additional information:
//   - See [Command.UnsetAddHeaders], for unsetting the flag.
//   - AddHeaders maps to cli flags: --add-headers=FIELD:VALUE.
//   - From option group: "Workarounds"
func (c *Command) AddHeaders(fieldvalue string) *Command {
	c.addFlag(&Flag{
		ID:   "headers",
		Flag: "--add-headers",
		Args: []string{fieldvalue},
	})
	return c
}

// UnsetAddHeaders unsets any flags that were previously set by one of:
//   - [Command.AddHeaders]
func (c *Command) UnsetAddHeaders() *Command {
	c.removeFlagByID("headers")
	return c
}

// Work around terminals that lack bidirectional text support. Requires bidiv or
// fribidi executable in PATH
//
// Additional information:
//   - See [Command.UnsetBidiWorkaround], for unsetting the flag.
//   - BidiWorkaround maps to cli flags: --bidi-workaround.
//   - From option group: "Workarounds"
func (c *Command) BidiWorkaround() *Command {
	c.addFlag(&Flag{
		ID:   "bidi_workaround",
		Flag: "--bidi-workaround",
		Args: nil,
	})
	return c
}

// UnsetBidiWorkaround unsets any flags that were previously set by one of:
//   - [Command.BidiWorkaround]
func (c *Command) UnsetBidiWorkaround() *Command {
	c.removeFlagByID("bidi_workaround")
	return c
}

// Number of seconds to sleep between requests during data extraction
//
// Additional information:
//   - See [Command.UnsetSleepRequests], for unsetting the flag.
//   - SleepRequests maps to cli flags: --sleep-requests=SECONDS.
//   - From option group: "Workarounds"
func (c *Command) SleepRequests(seconds float64) *Command {
	c.addFlag(&Flag{
		ID:   "sleep_interval_requests",
		Flag: "--sleep-requests",
		Args: []string{
			strconv.FormatFloat(seconds, 'g', -1, 64),
		},
	})
	return c
}

// UnsetSleepRequests unsets any flags that were previously set by one of:
//   - [Command.SleepRequests]
func (c *Command) UnsetSleepRequests() *Command {
	c.removeFlagByID("sleep_interval_requests")
	return c
}

// Number of seconds to sleep before each download. This is the minimum time to
// sleep when used along with --max-sleep-interval
//
// Additional information:
//   - See [Command.UnsetSleepInterval], for unsetting the flag.
//   - SleepInterval maps to cli flags: --sleep-interval/--min-sleep-interval=SECONDS.
//   - From option group: "Workarounds"
func (c *Command) SleepInterval(seconds float64) *Command {
	c.addFlag(&Flag{
		ID:   "sleep_interval",
		Flag: "--sleep-interval",
		Args: []string{
			strconv.FormatFloat(seconds, 'g', -1, 64),
		},
	})
	return c
}

// UnsetSleepInterval unsets any flags that were previously set by one of:
//   - [Command.SleepInterval]
func (c *Command) UnsetSleepInterval() *Command {
	c.removeFlagByID("sleep_interval")
	return c
}

// Maximum number of seconds to sleep. Can only be used along with
// --min-sleep-interval
//
// Additional information:
//   - See [Command.UnsetMaxSleepInterval], for unsetting the flag.
//   - MaxSleepInterval maps to cli flags: --max-sleep-interval=SECONDS.
//   - From option group: "Workarounds"
func (c *Command) MaxSleepInterval(seconds float64) *Command {
	c.addFlag(&Flag{
		ID:   "max_sleep_interval",
		Flag: "--max-sleep-interval",
		Args: []string{
			strconv.FormatFloat(seconds, 'g', -1, 64),
		},
	})
	return c
}

// UnsetMaxSleepInterval unsets any flags that were previously set by one of:
//   - [Command.MaxSleepInterval]
func (c *Command) UnsetMaxSleepInterval() *Command {
	c.removeFlagByID("max_sleep_interval")
	return c
}

// Number of seconds to sleep before each subtitle download
//
// Additional information:
//   - See [Command.UnsetSleepSubtitles], for unsetting the flag.
//   - SleepSubtitles maps to cli flags: --sleep-subtitles=SECONDS.
//   - From option group: "Workarounds"
func (c *Command) SleepSubtitles(seconds int) *Command {
	c.addFlag(&Flag{
		ID:   "sleep_interval_subtitles",
		Flag: "--sleep-subtitles",
		Args: []string{
			strconv.Itoa(seconds),
		},
	})
	return c
}

// UnsetSleepSubtitles unsets any flags that were previously set by one of:
//   - [Command.SleepSubtitles]
func (c *Command) UnsetSleepSubtitles() *Command {
	c.removeFlagByID("sleep_interval_subtitles")
	return c
}

// Video format code, see "FORMAT SELECTION" for more details
//
// References:
//   - Format Selection: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#format-selection
//   - Filter Formatting: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#filtering-formats
//   - Format Selection Examples: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#format-selection-examples
//
// Additional information:
//   - See [Command.UnsetFormat], for unsetting the flag.
//   - Format maps to cli flags: -f/--format=FORMAT.
//   - From option group: "Video Format"
func (c *Command) Format(format string) *Command {
	c.addFlag(&Flag{
		ID:   "format",
		Flag: "--format",
		Args: []string{format},
	})
	return c
}

// UnsetFormat unsets any flags that were previously set by one of:
//   - [Command.Format]
func (c *Command) UnsetFormat() *Command {
	c.removeFlagByID("format")
	return c
}

// Sort the formats by the fields given, see "Sorting Formats" for more details
//
// References:
//   - Sorting Formats: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#sorting-formats
//   - Format Selection Examples: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#format-selection-examples
//
// Additional information:
//   - See [Command.UnsetFormatSort], for unsetting the flag.
//   - FormatSort maps to cli flags: -S/--format-sort=SORTORDER.
//   - From option group: "Video Format"
func (c *Command) FormatSort(sortorder string) *Command {
	c.addFlag(&Flag{
		ID:   "format_sort",
		Flag: "--format-sort",
		Args: []string{sortorder},
	})
	return c
}

// UnsetFormatSort unsets any flags that were previously set by one of:
//   - [Command.FormatSort]
func (c *Command) UnsetFormatSort() *Command {
	c.removeFlagByID("format_sort")
	return c
}

// Force user specified sort order to have precedence over all fields, see "Sorting
// Formats" for more details
//
// References:
//   - Sorting Formats: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#sorting-formats
//
// Additional information:
//   - See [Command.UnsetFormatSortForce], for unsetting the flag.
//   - FormatSortForce maps to cli flags: --format-sort-force/--S-force=FORMAT.
//   - From option group: "Video Format"
func (c *Command) FormatSortForce() *Command {
	c.addFlag(&Flag{
		ID:   "format_sort_force",
		Flag: "--format-sort-force",
		Args: nil,
	})
	return c
}

// UnsetFormatSortForce unsets any flags that were previously set by one of:
//   - [Command.FormatSortForce]
//   - [Command.NoFormatSortForce]
func (c *Command) UnsetFormatSortForce() *Command {
	c.removeFlagByID("format_sort_force")
	return c
}

// Some fields have precedence over the user specified sort order (default)
//
// Additional information:
//   - See [Command.UnsetFormatSortForce], for unsetting the flag.
//   - NoFormatSortForce maps to cli flags: --no-format-sort-force=FORMAT.
//   - From option group: "Video Format"
func (c *Command) NoFormatSortForce() *Command {
	c.addFlag(&Flag{
		ID:   "format_sort_force",
		Flag: "--no-format-sort-force",
		Args: nil,
	})
	return c
}

// Allow multiple video streams to be merged into a single file
//
// References:
//   - Format Selection: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#format-selection
//
// Additional information:
//   - See [Command.UnsetVideoMultistreams], for unsetting the flag.
//   - VideoMultistreams maps to cli flags: --video-multistreams.
//   - From option group: "Video Format"
func (c *Command) VideoMultistreams() *Command {
	c.addFlag(&Flag{
		ID:   "allow_multiple_video_streams",
		Flag: "--video-multistreams",
		Args: nil,
	})
	return c
}

// UnsetVideoMultistreams unsets any flags that were previously set by one of:
//   - [Command.VideoMultistreams]
//   - [Command.NoVideoMultistreams]
func (c *Command) UnsetVideoMultistreams() *Command {
	c.removeFlagByID("allow_multiple_video_streams")
	return c
}

// Only one video stream is downloaded for each output file (default)
//
// Additional information:
//   - See [Command.UnsetVideoMultistreams], for unsetting the flag.
//   - NoVideoMultistreams maps to cli flags: --no-video-multistreams.
//   - From option group: "Video Format"
func (c *Command) NoVideoMultistreams() *Command {
	c.addFlag(&Flag{
		ID:   "allow_multiple_video_streams",
		Flag: "--no-video-multistreams",
		Args: nil,
	})
	return c
}

// Allow multiple audio streams to be merged into a single file
//
// References:
//   - Format Selection: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#format-selection
//
// Additional information:
//   - See [Command.UnsetAudioMultistreams], for unsetting the flag.
//   - AudioMultistreams maps to cli flags: --audio-multistreams.
//   - From option group: "Video Format"
func (c *Command) AudioMultistreams() *Command {
	c.addFlag(&Flag{
		ID:   "allow_multiple_audio_streams",
		Flag: "--audio-multistreams",
		Args: nil,
	})
	return c
}

// UnsetAudioMultistreams unsets any flags that were previously set by one of:
//   - [Command.AudioMultistreams]
//   - [Command.NoAudioMultistreams]
func (c *Command) UnsetAudioMultistreams() *Command {
	c.removeFlagByID("allow_multiple_audio_streams")
	return c
}

// Only one audio stream is downloaded for each output file (default)
//
// Additional information:
//   - See [Command.UnsetAudioMultistreams], for unsetting the flag.
//   - NoAudioMultistreams maps to cli flags: --no-audio-multistreams.
//   - From option group: "Video Format"
func (c *Command) NoAudioMultistreams() *Command {
	c.addFlag(&Flag{
		ID:   "allow_multiple_audio_streams",
		Flag: "--no-audio-multistreams",
		Args: nil,
	})
	return c
}

// AllFormats sets the "all-formats" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetAllFormats], for unsetting the flag.
//   - AllFormats maps to cli flags: --all-formats (hidden).
//   - From option group: "Video Format"
func (c *Command) AllFormats() *Command {
	c.addFlag(&Flag{
		ID:   "format",
		Flag: "--all-formats",
		Args: nil,
	})
	return c
}

// UnsetAllFormats unsets any flags that were previously set by one of:
//   - [Command.AllFormats]
func (c *Command) UnsetAllFormats() *Command {
	c.removeFlagByID("format")
	return c
}

// Prefer video formats with free containers over non-free ones of same quality.
// Use with "-S ext" to strictly prefer free containers irrespective of quality
//
// Additional information:
//   - See [Command.UnsetPreferFreeFormats], for unsetting the flag.
//   - PreferFreeFormats maps to cli flags: --prefer-free-formats.
//   - From option group: "Video Format"
func (c *Command) PreferFreeFormats() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_free_formats",
		Flag: "--prefer-free-formats",
		Args: nil,
	})
	return c
}

// UnsetPreferFreeFormats unsets any flags that were previously set by one of:
//   - [Command.PreferFreeFormats]
//   - [Command.NoPreferFreeFormats]
func (c *Command) UnsetPreferFreeFormats() *Command {
	c.removeFlagByID("prefer_free_formats")
	return c
}

// Don't give any special preference to free containers (default)
//
// Additional information:
//   - See [Command.UnsetPreferFreeFormats], for unsetting the flag.
//   - NoPreferFreeFormats maps to cli flags: --no-prefer-free-formats.
//   - From option group: "Video Format"
func (c *Command) NoPreferFreeFormats() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_free_formats",
		Flag: "--no-prefer-free-formats",
		Args: nil,
	})
	return c
}

// Make sure formats are selected only from those that are actually downloadable
//
// Additional information:
//   - See [Command.UnsetCheckFormats], for unsetting the flag.
//   - CheckFormats maps to cli flags: --check-formats.
//   - From option group: "Video Format"
func (c *Command) CheckFormats() *Command {
	c.addFlag(&Flag{
		ID:   "check_formats",
		Flag: "--check-formats",
		Args: nil,
	})
	return c
}

// UnsetCheckFormats unsets any flags that were previously set by one of:
//   - [Command.CheckFormats]
//   - [Command.NoCheckFormats]
func (c *Command) UnsetCheckFormats() *Command {
	c.removeFlagByID("check_formats")
	return c
}

// Check all formats for whether they are actually downloadable
//
// Additional information:
//   - See [Command.UnsetCheckAllFormats], for unsetting the flag.
//   - CheckAllFormats maps to cli flags: --check-all-formats.
//   - From option group: "Video Format"
func (c *Command) CheckAllFormats() *Command {
	c.addFlag(&Flag{
		ID:   "check_formats",
		Flag: "--check-all-formats",
		Args: nil,
	})
	return c
}

// UnsetCheckAllFormats unsets any flags that were previously set by one of:
//   - [Command.CheckAllFormats]
func (c *Command) UnsetCheckAllFormats() *Command {
	c.removeFlagByID("check_formats")
	return c
}

// Do not check that the formats are actually downloadable
//
// Additional information:
//   - See [Command.UnsetCheckFormats], for unsetting the flag.
//   - NoCheckFormats maps to cli flags: --no-check-formats.
//   - From option group: "Video Format"
func (c *Command) NoCheckFormats() *Command {
	c.addFlag(&Flag{
		ID:   "check_formats",
		Flag: "--no-check-formats",
		Args: nil,
	})
	return c
}

// List available formats of each video. Simulate unless --no-simulate is used
//
// Additional information:
//   - See [Command.UnsetListFormats], for unsetting the flag.
//   - ListFormats maps to cli flags: -F/--list-formats.
//   - From option group: "Video Format"
func (c *Command) ListFormats() *Command {
	c.addFlag(&Flag{
		ID:   "listformats",
		Flag: "--list-formats",
		Args: nil,
	})
	return c
}

// UnsetListFormats unsets any flags that were previously set by one of:
//   - [Command.ListFormats]
func (c *Command) UnsetListFormats() *Command {
	c.removeFlagByID("listformats")
	return c
}

// ListFormatsAsTable sets the "list-formats-as-table" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetListFormatsAsTable], for unsetting the flag.
//   - ListFormatsAsTable maps to cli flags: --list-formats-as-table (hidden).
//   - From option group: "Video Format"
func (c *Command) ListFormatsAsTable() *Command {
	c.addFlag(&Flag{
		ID:   "listformats_table",
		Flag: "--list-formats-as-table",
		Args: nil,
	})
	return c
}

// UnsetListFormatsAsTable unsets any flags that were previously set by one of:
//   - [Command.ListFormatsAsTable]
func (c *Command) UnsetListFormatsAsTable() *Command {
	c.removeFlagByID("listformats_table")
	return c
}

// ListFormatsOld sets the "list-formats-old" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetListFormatsOld], for unsetting the flag.
//   - ListFormatsOld maps to cli flags: --list-formats-old/--no-list-formats-as-table (hidden).
//   - From option group: "Video Format"
func (c *Command) ListFormatsOld() *Command {
	c.addFlag(&Flag{
		ID:   "listformats_table",
		Flag: "--list-formats-old",
		Args: nil,
	})
	return c
}

// UnsetListFormatsOld unsets any flags that were previously set by one of:
//   - [Command.ListFormatsOld]
func (c *Command) UnsetListFormatsOld() *Command {
	c.removeFlagByID("listformats_table")
	return c
}

// Containers that may be used when merging formats, separated by "/", e.g.
// "mp4/mkv". Ignored if no merge is required. (currently supported: avi, flv, mkv,
// mov, mp4, webm)
//
// Additional information:
//   - See [Command.UnsetMergeOutputFormat], for unsetting the flag.
//   - MergeOutputFormat maps to cli flags: --merge-output-format=FORMAT.
//   - From option group: "Video Format"
func (c *Command) MergeOutputFormat(format string) *Command {
	c.addFlag(&Flag{
		ID:   "merge_output_format",
		Flag: "--merge-output-format",
		Args: []string{format},
	})
	return c
}

// UnsetMergeOutputFormat unsets any flags that were previously set by one of:
//   - [Command.MergeOutputFormat]
func (c *Command) UnsetMergeOutputFormat() *Command {
	c.removeFlagByID("merge_output_format")
	return c
}

// Write subtitle file
//
// Additional information:
//   - See [Command.UnsetWriteSubs], for unsetting the flag.
//   - WriteSubs maps to cli flags: --write-subs/--write-srt.
//   - From option group: "Subtitle"
func (c *Command) WriteSubs() *Command {
	c.addFlag(&Flag{
		ID:   "writesubtitles",
		Flag: "--write-subs",
		Args: nil,
	})
	return c
}

// UnsetWriteSubs unsets any flags that were previously set by one of:
//   - [Command.WriteSubs]
//   - [Command.NoWriteSubs]
func (c *Command) UnsetWriteSubs() *Command {
	c.removeFlagByID("writesubtitles")
	return c
}

// Do not write subtitle file (default)
//
// Additional information:
//   - See [Command.UnsetWriteSubs], for unsetting the flag.
//   - NoWriteSubs maps to cli flags: --no-write-subs/--no-write-srt.
//   - From option group: "Subtitle"
func (c *Command) NoWriteSubs() *Command {
	c.addFlag(&Flag{
		ID:   "writesubtitles",
		Flag: "--no-write-subs",
		Args: nil,
	})
	return c
}

// Write automatically generated subtitle file
//
// Additional information:
//   - See [Command.UnsetWriteAutoSubs], for unsetting the flag.
//   - WriteAutoSubs maps to cli flags: --write-auto-subs/--write-automatic-subs.
//   - From option group: "Subtitle"
func (c *Command) WriteAutoSubs() *Command {
	c.addFlag(&Flag{
		ID:   "writeautomaticsub",
		Flag: "--write-auto-subs",
		Args: nil,
	})
	return c
}

// UnsetWriteAutoSubs unsets any flags that were previously set by one of:
//   - [Command.WriteAutoSubs]
//   - [Command.NoWriteAutoSubs]
func (c *Command) UnsetWriteAutoSubs() *Command {
	c.removeFlagByID("writeautomaticsub")
	return c
}

// Do not write auto-generated subtitles (default)
//
// Additional information:
//   - See [Command.UnsetWriteAutoSubs], for unsetting the flag.
//   - NoWriteAutoSubs maps to cli flags: --no-write-auto-subs/--no-write-automatic-subs.
//   - From option group: "Subtitle"
func (c *Command) NoWriteAutoSubs() *Command {
	c.addFlag(&Flag{
		ID:   "writeautomaticsub",
		Flag: "--no-write-auto-subs",
		Args: nil,
	})
	return c
}

// AllSubs sets the "all-subs" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetAllSubs], for unsetting the flag.
//   - AllSubs maps to cli flags: --all-subs (hidden).
//   - From option group: "Subtitle"
func (c *Command) AllSubs() *Command {
	c.addFlag(&Flag{
		ID:   "allsubtitles",
		Flag: "--all-subs",
		Args: nil,
	})
	return c
}

// UnsetAllSubs unsets any flags that were previously set by one of:
//   - [Command.AllSubs]
func (c *Command) UnsetAllSubs() *Command {
	c.removeFlagByID("allsubtitles")
	return c
}

// List available subtitles of each video. Simulate unless --no-simulate is used
//
// Additional information:
//   - See [Command.UnsetListSubs], for unsetting the flag.
//   - ListSubs maps to cli flags: --list-subs.
//   - From option group: "Subtitle"
func (c *Command) ListSubs() *Command {
	c.addFlag(&Flag{
		ID:   "listsubtitles",
		Flag: "--list-subs",
		Args: nil,
	})
	return c
}

// UnsetListSubs unsets any flags that were previously set by one of:
//   - [Command.ListSubs]
func (c *Command) UnsetListSubs() *Command {
	c.removeFlagByID("listsubtitles")
	return c
}

// Subtitle format; accepts formats preference, e.g. "srt" or "ass/srt/best"
//
// Additional information:
//   - See [Command.UnsetSubFormat], for unsetting the flag.
//   - SubFormat maps to cli flags: --sub-format=FORMAT.
//   - From option group: "Subtitle"
func (c *Command) SubFormat(format string) *Command {
	c.addFlag(&Flag{
		ID:   "subtitlesformat",
		Flag: "--sub-format",
		Args: []string{format},
	})
	return c
}

// UnsetSubFormat unsets any flags that were previously set by one of:
//   - [Command.SubFormat]
func (c *Command) UnsetSubFormat() *Command {
	c.removeFlagByID("subtitlesformat")
	return c
}

// Languages of the subtitles to download (can be regex) or "all" separated by
// commas, e.g. --sub-langs "en.*,ja". You can prefix the language code with a "-"
// to exclude it from the requested languages, e.g. --sub-langs all,-live_chat. Use
// --list-subs for a list of available language tags
//
// Additional information:
//   - See [Command.UnsetSubLangs], for unsetting the flag.
//   - SubLangs maps to cli flags: --sub-langs/--srt-langs=LANGS.
//   - From option group: "Subtitle"
func (c *Command) SubLangs(langs string) *Command {
	c.addFlag(&Flag{
		ID:   "subtitleslangs",
		Flag: "--sub-langs",
		Args: []string{langs},
	})
	return c
}

// UnsetSubLangs unsets any flags that were previously set by one of:
//   - [Command.SubLangs]
func (c *Command) UnsetSubLangs() *Command {
	c.removeFlagByID("subtitleslangs")
	return c
}

// Login with this account ID
//
// Additional information:
//   - See [Command.UnsetUsername], for unsetting the flag.
//   - Username maps to cli flags: -u/--username=USERNAME.
//   - From option group: "Authentication"
func (c *Command) Username(username string) *Command {
	c.addFlag(&Flag{
		ID:   "username",
		Flag: "--username",
		Args: []string{username},
	})
	return c
}

// UnsetUsername unsets any flags that were previously set by one of:
//   - [Command.Username]
func (c *Command) UnsetUsername() *Command {
	c.removeFlagByID("username")
	return c
}

// Account password. If this option is left out, yt-dlp will ask interactively
//
// Additional information:
//   - See [Command.UnsetPassword], for unsetting the flag.
//   - Password maps to cli flags: -p/--password=PASSWORD.
//   - From option group: "Authentication"
func (c *Command) Password(password string) *Command {
	c.addFlag(&Flag{
		ID:   "password",
		Flag: "--password",
		Args: []string{password},
	})
	return c
}

// UnsetPassword unsets any flags that were previously set by one of:
//   - [Command.Password]
func (c *Command) UnsetPassword() *Command {
	c.removeFlagByID("password")
	return c
}

// Two-factor authentication code
//
// Additional information:
//   - See [Command.UnsetTwoFactor], for unsetting the flag.
//   - TwoFactor maps to cli flags: -2/--twofactor=TWOFACTOR.
//   - From option group: "Authentication"
func (c *Command) TwoFactor(twofactor string) *Command {
	c.addFlag(&Flag{
		ID:   "twofactor",
		Flag: "--twofactor",
		Args: []string{twofactor},
	})
	return c
}

// UnsetTwoFactor unsets any flags that were previously set by one of:
//   - [Command.TwoFactor]
func (c *Command) UnsetTwoFactor() *Command {
	c.removeFlagByID("twofactor")
	return c
}

// Use .netrc authentication data
//
// Additional information:
//   - See [Command.UnsetNetrc], for unsetting the flag.
//   - Netrc maps to cli flags: -n/--netrc.
//   - From option group: "Authentication"
func (c *Command) Netrc() *Command {
	c.addFlag(&Flag{
		ID:   "usenetrc",
		Flag: "--netrc",
		Args: nil,
	})
	return c
}

// UnsetNetrc unsets any flags that were previously set by one of:
//   - [Command.Netrc]
func (c *Command) UnsetNetrc() *Command {
	c.removeFlagByID("usenetrc")
	return c
}

// Location of .netrc authentication data; either the path or its containing
// directory. Defaults to ~/.netrc
//
// Additional information:
//   - See [Command.UnsetNetrcLocation], for unsetting the flag.
//   - NetrcLocation maps to cli flags: --netrc-location=PATH.
//   - From option group: "Authentication"
func (c *Command) NetrcLocation(path string) *Command {
	c.addFlag(&Flag{
		ID:   "netrc_location",
		Flag: "--netrc-location",
		Args: []string{path},
	})
	return c
}

// UnsetNetrcLocation unsets any flags that were previously set by one of:
//   - [Command.NetrcLocation]
func (c *Command) UnsetNetrcLocation() *Command {
	c.removeFlagByID("netrc_location")
	return c
}

// Command to execute to get the credentials for an extractor.
//
// Additional information:
//   - See [Command.UnsetNetrcCmd], for unsetting the flag.
//   - NetrcCmd maps to cli flags: --netrc-cmd=NETRC_CMD.
//   - From option group: "Authentication"
func (c *Command) NetrcCmd(netrcCmd string) *Command {
	c.addFlag(&Flag{
		ID:   "netrc_cmd",
		Flag: "--netrc-cmd",
		Args: []string{netrcCmd},
	})
	return c
}

// UnsetNetrcCmd unsets any flags that were previously set by one of:
//   - [Command.NetrcCmd]
func (c *Command) UnsetNetrcCmd() *Command {
	c.removeFlagByID("netrc_cmd")
	return c
}

// Video-specific password
//
// Additional information:
//   - See [Command.UnsetVideoPassword], for unsetting the flag.
//   - VideoPassword maps to cli flags: --video-password=PASSWORD.
//   - From option group: "Authentication"
func (c *Command) VideoPassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "videopassword",
		Flag: "--video-password",
		Args: []string{password},
	})
	return c
}

// UnsetVideoPassword unsets any flags that were previously set by one of:
//   - [Command.VideoPassword]
func (c *Command) UnsetVideoPassword() *Command {
	c.removeFlagByID("videopassword")
	return c
}

// Adobe Pass multiple-system operator (TV provider) identifier, use --ap-list-mso
// for a list of available MSOs
//
// Additional information:
//   - See [Command.UnsetApMSO], for unsetting the flag.
//   - ApMSO maps to cli flags: --ap-mso=MSO.
//   - From option group: "Authentication"
func (c *Command) ApMSO(mso string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_mso",
		Flag: "--ap-mso",
		Args: []string{mso},
	})
	return c
}

// UnsetApMSO unsets any flags that were previously set by one of:
//   - [Command.ApMSO]
func (c *Command) UnsetApMSO() *Command {
	c.removeFlagByID("ap_mso")
	return c
}

// Multiple-system operator account login
//
// Additional information:
//   - See [Command.UnsetApUsername], for unsetting the flag.
//   - ApUsername maps to cli flags: --ap-username=USERNAME.
//   - From option group: "Authentication"
func (c *Command) ApUsername(username string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_username",
		Flag: "--ap-username",
		Args: []string{username},
	})
	return c
}

// UnsetApUsername unsets any flags that were previously set by one of:
//   - [Command.ApUsername]
func (c *Command) UnsetApUsername() *Command {
	c.removeFlagByID("ap_username")
	return c
}

// Multiple-system operator account password. If this option is left out, yt-dlp
// will ask interactively
//
// Additional information:
//   - See [Command.UnsetApPassword], for unsetting the flag.
//   - ApPassword maps to cli flags: --ap-password=PASSWORD.
//   - From option group: "Authentication"
func (c *Command) ApPassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_password",
		Flag: "--ap-password",
		Args: []string{password},
	})
	return c
}

// UnsetApPassword unsets any flags that were previously set by one of:
//   - [Command.ApPassword]
func (c *Command) UnsetApPassword() *Command {
	c.removeFlagByID("ap_password")
	return c
}

// List all supported multiple-system operators
//
// Additional information:
//   - See [Command.UnsetApListMSO], for unsetting the flag.
//   - ApListMSO maps to cli flags: --ap-list-mso.
//   - From option group: "Authentication"
func (c *Command) ApListMSO() *Command {
	c.addFlag(&Flag{
		ID:   "ap_list_mso",
		Flag: "--ap-list-mso",
		Args: nil,
	})
	return c
}

// UnsetApListMSO unsets any flags that were previously set by one of:
//   - [Command.ApListMSO]
func (c *Command) UnsetApListMSO() *Command {
	c.removeFlagByID("ap_list_mso")
	return c
}

// Path to client certificate file in PEM format. May include the private key
//
// Additional information:
//   - See [Command.UnsetClientCertificate], for unsetting the flag.
//   - ClientCertificate maps to cli flags: --client-certificate=CERTFILE.
//   - From option group: "Authentication"
func (c *Command) ClientCertificate(certfile string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate",
		Flag: "--client-certificate",
		Args: []string{certfile},
	})
	return c
}

// UnsetClientCertificate unsets any flags that were previously set by one of:
//   - [Command.ClientCertificate]
func (c *Command) UnsetClientCertificate() *Command {
	c.removeFlagByID("client_certificate")
	return c
}

// Path to private key file for client certificate
//
// Additional information:
//   - See [Command.UnsetClientCertificateKey], for unsetting the flag.
//   - ClientCertificateKey maps to cli flags: --client-certificate-key=KEYFILE.
//   - From option group: "Authentication"
func (c *Command) ClientCertificateKey(keyfile string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate_key",
		Flag: "--client-certificate-key",
		Args: []string{keyfile},
	})
	return c
}

// UnsetClientCertificateKey unsets any flags that were previously set by one of:
//   - [Command.ClientCertificateKey]
func (c *Command) UnsetClientCertificateKey() *Command {
	c.removeFlagByID("client_certificate_key")
	return c
}

// Password for client certificate private key, if encrypted. If not provided, and
// the key is encrypted, yt-dlp will ask interactively
//
// Additional information:
//   - See [Command.UnsetClientCertificatePassword], for unsetting the flag.
//   - ClientCertificatePassword maps to cli flags: --client-certificate-password=PASSWORD.
//   - From option group: "Authentication"
func (c *Command) ClientCertificatePassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate_password",
		Flag: "--client-certificate-password",
		Args: []string{password},
	})
	return c
}

// UnsetClientCertificatePassword unsets any flags that were previously set by one of:
//   - [Command.ClientCertificatePassword]
func (c *Command) UnsetClientCertificatePassword() *Command {
	c.removeFlagByID("client_certificate_password")
	return c
}

// Convert video files to audio-only files (requires ffmpeg and ffprobe)
//
// Additional information:
//   - See [Command.UnsetExtractAudio], for unsetting the flag.
//   - ExtractAudio maps to cli flags: -x/--extract-audio.
//   - From option group: "Post-Processing"
func (c *Command) ExtractAudio() *Command {
	c.addFlag(&Flag{
		ID:   "extractaudio",
		Flag: "--extract-audio",
		Args: nil,
	})
	return c
}

// UnsetExtractAudio unsets any flags that were previously set by one of:
//   - [Command.ExtractAudio]
func (c *Command) UnsetExtractAudio() *Command {
	c.removeFlagByID("extractaudio")
	return c
}

// Format to convert the audio to when -x is used. (currently supported: best
// (default), aac, alac, flac, m4a, mp3, opus, vorbis, wav). You can specify
// multiple rules using similar syntax as --remux-video
//
// Additional information:
//   - See [Command.UnsetAudioFormat], for unsetting the flag.
//   - AudioFormat maps to cli flags: --audio-format=FORMAT.
//   - From option group: "Post-Processing"
func (c *Command) AudioFormat(format string) *Command {
	c.addFlag(&Flag{
		ID:   "audioformat",
		Flag: "--audio-format",
		Args: []string{format},
	})
	return c
}

// UnsetAudioFormat unsets any flags that were previously set by one of:
//   - [Command.AudioFormat]
func (c *Command) UnsetAudioFormat() *Command {
	c.removeFlagByID("audioformat")
	return c
}

// Specify ffmpeg audio quality to use when converting the audio with -x. Insert a
// value between 0 (best) and 10 (worst) for VBR or a specific bitrate like 128K
// (default 5)
//
// Additional information:
//   - See [Command.UnsetAudioQuality], for unsetting the flag.
//   - AudioQuality maps to cli flags: --audio-quality=QUALITY.
//   - From option group: "Post-Processing"
func (c *Command) AudioQuality(quality string) *Command {
	c.addFlag(&Flag{
		ID:   "audioquality",
		Flag: "--audio-quality",
		Args: []string{quality},
	})
	return c
}

// UnsetAudioQuality unsets any flags that were previously set by one of:
//   - [Command.AudioQuality]
func (c *Command) UnsetAudioQuality() *Command {
	c.removeFlagByID("audioquality")
	return c
}

// Remux the video into another container if necessary (currently supported: avi,
// flv, gif, mkv, mov, mp4, webm, aac, aiff, alac, flac, m4a, mka, mp3, ogg, opus,
// vorbis, wav). If target container does not support the video/audio codec,
// remuxing will fail. You can specify multiple rules; e.g. "aac>m4a/mov>mp4/mkv"
// will remux aac to m4a, mov to mp4 and anything else to mkv
//
// Additional information:
//   - See [Command.UnsetRemuxVideo], for unsetting the flag.
//   - RemuxVideo maps to cli flags: --remux-video=FORMAT.
//   - From option group: "Post-Processing"
func (c *Command) RemuxVideo(format string) *Command {
	c.addFlag(&Flag{
		ID:   "remuxvideo",
		Flag: "--remux-video",
		Args: []string{format},
	})
	return c
}

// UnsetRemuxVideo unsets any flags that were previously set by one of:
//   - [Command.RemuxVideo]
func (c *Command) UnsetRemuxVideo() *Command {
	c.removeFlagByID("remuxvideo")
	return c
}

// Re-encode the video into another format if necessary. The syntax and supported
// formats are the same as --remux-video
//
// Additional information:
//   - See [Command.UnsetRecodeVideo], for unsetting the flag.
//   - RecodeVideo maps to cli flags: --recode-video=FORMAT.
//   - From option group: "Post-Processing"
func (c *Command) RecodeVideo(format string) *Command {
	c.addFlag(&Flag{
		ID:   "recodevideo",
		Flag: "--recode-video",
		Args: []string{format},
	})
	return c
}

// UnsetRecodeVideo unsets any flags that were previously set by one of:
//   - [Command.RecodeVideo]
func (c *Command) UnsetRecodeVideo() *Command {
	c.removeFlagByID("recodevideo")
	return c
}

// Give these arguments to the postprocessors. Specify the postprocessor/executable
// name and the arguments separated by a colon ":" to give the argument to the
// specified postprocessor/executable. Supported PP are: Merger, ModifyChapters,
// SplitChapters, ExtractAudio, VideoRemuxer, VideoConvertor, Metadata,
// EmbedSubtitle, EmbedThumbnail, SubtitlesConvertor, ThumbnailsConvertor,
// FixupStretched, FixupM4a, FixupM3u8, FixupTimestamp and FixupDuration. The
// supported executables are: AtomicParsley, FFmpeg and FFprobe. You can also
// specify "PP+EXE:ARGS" to give the arguments to the specified executable only
// when being used by the specified postprocessor. Additionally, for
// ffmpeg/ffprobe, "_i"/"_o" can be appended to the prefix optionally followed by a
// number to pass the argument before the specified input/output file, e.g. --ppa
// "Merger+ffmpeg_i1:-v quiet". You can use this option multiple times to give
// different arguments to different postprocessors.
//
// Additional information:
//   - See [Command.UnsetPostProcessorArgs], for unsetting the flag.
//   - PostProcessorArgs maps to cli flags: --postprocessor-args/--ppa=NAME:ARGS.
//   - From option group: "Post-Processing"
func (c *Command) PostProcessorArgs(nameargs string) *Command {
	c.addFlag(&Flag{
		ID:   "postprocessor_args",
		Flag: "--postprocessor-args",
		Args: []string{nameargs},
	})
	return c
}

// UnsetPostProcessorArgs unsets any flags that were previously set by one of:
//   - [Command.PostProcessorArgs]
func (c *Command) UnsetPostProcessorArgs() *Command {
	c.removeFlagByID("postprocessor_args")
	return c
}

// Keep the intermediate video file on disk after post-processing
//
// Additional information:
//   - See [Command.UnsetKeepVideo], for unsetting the flag.
//   - KeepVideo maps to cli flags: -k/--keep-video.
//   - From option group: "Post-Processing"
func (c *Command) KeepVideo() *Command {
	c.addFlag(&Flag{
		ID:   "keepvideo",
		Flag: "--keep-video",
		Args: nil,
	})
	return c
}

// UnsetKeepVideo unsets any flags that were previously set by one of:
//   - [Command.KeepVideo]
//   - [Command.NoKeepVideo]
func (c *Command) UnsetKeepVideo() *Command {
	c.removeFlagByID("keepvideo")
	return c
}

// Delete the intermediate video file after post-processing (default)
//
// Additional information:
//   - See [Command.UnsetKeepVideo], for unsetting the flag.
//   - NoKeepVideo maps to cli flags: --no-keep-video.
//   - From option group: "Post-Processing"
func (c *Command) NoKeepVideo() *Command {
	c.addFlag(&Flag{
		ID:   "keepvideo",
		Flag: "--no-keep-video",
		Args: nil,
	})
	return c
}

// Overwrite post-processed files (default)
//
// Additional information:
//   - See [Command.UnsetPostOverwrites], for unsetting the flag.
//   - PostOverwrites maps to cli flags: --post-overwrites.
//   - From option group: "Post-Processing"
func (c *Command) PostOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "nopostoverwrites",
		Flag: "--post-overwrites",
		Args: nil,
	})
	return c
}

// UnsetPostOverwrites unsets any flags that were previously set by one of:
//   - [Command.PostOverwrites]
//   - [Command.NoPostOverwrites]
func (c *Command) UnsetPostOverwrites() *Command {
	c.removeFlagByID("nopostoverwrites")
	return c
}

// Do not overwrite post-processed files
//
// Additional information:
//   - See [Command.UnsetPostOverwrites], for unsetting the flag.
//   - NoPostOverwrites maps to cli flags: --no-post-overwrites.
//   - From option group: "Post-Processing"
func (c *Command) NoPostOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "nopostoverwrites",
		Flag: "--no-post-overwrites",
		Args: nil,
	})
	return c
}

// Embed subtitles in the video (only for mp4, webm and mkv videos)
//
// Additional information:
//   - See [Command.UnsetEmbedSubs], for unsetting the flag.
//   - EmbedSubs maps to cli flags: --embed-subs.
//   - From option group: "Post-Processing"
func (c *Command) EmbedSubs() *Command {
	c.addFlag(&Flag{
		ID:   "embedsubtitles",
		Flag: "--embed-subs",
		Args: nil,
	})
	return c
}

// UnsetEmbedSubs unsets any flags that were previously set by one of:
//   - [Command.EmbedSubs]
//   - [Command.NoEmbedSubs]
func (c *Command) UnsetEmbedSubs() *Command {
	c.removeFlagByID("embedsubtitles")
	return c
}

// Do not embed subtitles (default)
//
// Additional information:
//   - See [Command.UnsetEmbedSubs], for unsetting the flag.
//   - NoEmbedSubs maps to cli flags: --no-embed-subs.
//   - From option group: "Post-Processing"
func (c *Command) NoEmbedSubs() *Command {
	c.addFlag(&Flag{
		ID:   "embedsubtitles",
		Flag: "--no-embed-subs",
		Args: nil,
	})
	return c
}

// Embed thumbnail in the video as cover art
//
// Additional information:
//   - See [Command.UnsetEmbedThumbnail], for unsetting the flag.
//   - EmbedThumbnail maps to cli flags: --embed-thumbnail.
//   - From option group: "Post-Processing"
func (c *Command) EmbedThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "embedthumbnail",
		Flag: "--embed-thumbnail",
		Args: nil,
	})
	return c
}

// UnsetEmbedThumbnail unsets any flags that were previously set by one of:
//   - [Command.EmbedThumbnail]
//   - [Command.NoEmbedThumbnail]
func (c *Command) UnsetEmbedThumbnail() *Command {
	c.removeFlagByID("embedthumbnail")
	return c
}

// Do not embed thumbnail (default)
//
// Additional information:
//   - See [Command.UnsetEmbedThumbnail], for unsetting the flag.
//   - NoEmbedThumbnail maps to cli flags: --no-embed-thumbnail.
//   - From option group: "Post-Processing"
func (c *Command) NoEmbedThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "embedthumbnail",
		Flag: "--no-embed-thumbnail",
		Args: nil,
	})
	return c
}

// Embed metadata to the video file. Also embeds chapters/infojson if present
// unless --no-embed-chapters/--no-embed-info-json are used
//
// Additional information:
//   - See [Command.UnsetEmbedMetadata], for unsetting the flag.
//   - EmbedMetadata maps to cli flags: --embed-metadata/--add-metadata.
//   - From option group: "Post-Processing"
func (c *Command) EmbedMetadata() *Command {
	c.addFlag(&Flag{
		ID:   "addmetadata",
		Flag: "--embed-metadata",
		Args: nil,
	})
	return c
}

// UnsetEmbedMetadata unsets any flags that were previously set by one of:
//   - [Command.EmbedMetadata]
//   - [Command.NoEmbedMetadata]
func (c *Command) UnsetEmbedMetadata() *Command {
	c.removeFlagByID("addmetadata")
	return c
}

// Do not add metadata to file (default)
//
// Additional information:
//   - See [Command.UnsetEmbedMetadata], for unsetting the flag.
//   - NoEmbedMetadata maps to cli flags: --no-embed-metadata/--no-add-metadata.
//   - From option group: "Post-Processing"
func (c *Command) NoEmbedMetadata() *Command {
	c.addFlag(&Flag{
		ID:   "addmetadata",
		Flag: "--no-embed-metadata",
		Args: nil,
	})
	return c
}

// Add chapter markers to the video file
//
// Additional information:
//   - See [Command.UnsetEmbedChapters], for unsetting the flag.
//   - EmbedChapters maps to cli flags: --embed-chapters/--add-chapters.
//   - From option group: "Post-Processing"
func (c *Command) EmbedChapters() *Command {
	c.addFlag(&Flag{
		ID:   "addchapters",
		Flag: "--embed-chapters",
		Args: nil,
	})
	return c
}

// UnsetEmbedChapters unsets any flags that were previously set by one of:
//   - [Command.EmbedChapters]
//   - [Command.NoEmbedChapters]
func (c *Command) UnsetEmbedChapters() *Command {
	c.removeFlagByID("addchapters")
	return c
}

// Do not add chapter markers (default)
//
// Additional information:
//   - See [Command.UnsetEmbedChapters], for unsetting the flag.
//   - NoEmbedChapters maps to cli flags: --no-embed-chapters/--no-add-chapters.
//   - From option group: "Post-Processing"
func (c *Command) NoEmbedChapters() *Command {
	c.addFlag(&Flag{
		ID:   "addchapters",
		Flag: "--no-embed-chapters",
		Args: nil,
	})
	return c
}

// Embed the infojson as an attachment to mkv/mka video files
//
// Additional information:
//   - See [Command.UnsetEmbedInfoJSON], for unsetting the flag.
//   - EmbedInfoJSON maps to cli flags: --embed-info-json.
//   - From option group: "Post-Processing"
func (c *Command) EmbedInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "embed_infojson",
		Flag: "--embed-info-json",
		Args: nil,
	})
	return c
}

// UnsetEmbedInfoJSON unsets any flags that were previously set by one of:
//   - [Command.EmbedInfoJSON]
//   - [Command.NoEmbedInfoJSON]
func (c *Command) UnsetEmbedInfoJSON() *Command {
	c.removeFlagByID("embed_infojson")
	return c
}

// Do not embed the infojson as an attachment to the video file
//
// Additional information:
//   - See [Command.UnsetEmbedInfoJSON], for unsetting the flag.
//   - NoEmbedInfoJSON maps to cli flags: --no-embed-info-json.
//   - From option group: "Post-Processing"
func (c *Command) NoEmbedInfoJSON() *Command {
	c.addFlag(&Flag{
		ID:   "embed_infojson",
		Flag: "--no-embed-info-json",
		Args: nil,
	})
	return c
}

// MetadataFromTitle sets the "metadata-from-title" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetMetadataFromTitle], for unsetting the flag.
//   - MetadataFromTitle maps to cli flags: --metadata-from-title=FORMAT (hidden).
//   - From option group: "Post-Processing"
func (c *Command) MetadataFromTitle(format string) *Command {
	c.addFlag(&Flag{
		ID:   "metafromtitle",
		Flag: "--metadata-from-title",
		Args: []string{format},
	})
	return c
}

// UnsetMetadataFromTitle unsets any flags that were previously set by one of:
//   - [Command.MetadataFromTitle]
func (c *Command) UnsetMetadataFromTitle() *Command {
	c.removeFlagByID("metafromtitle")
	return c
}

// Parse additional metadata like title/artist from other fields; see "MODIFYING
// METADATA" for details. Supported values of "WHEN" are the same as that of
// --use-postprocessor (default: pre_process)
//
// References:
//   - Modifying Metadata: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#modifying-metadata
//   - Modifying Metadata Examples: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#modifying-metadata-examples
//
// Additional information:
//   - See [Command.UnsetParseMetadata], for unsetting the flag.
//   - ParseMetadata maps to cli flags: --parse-metadata=[WHEN:]FROM:TO.
//   - From option group: "Post-Processing"
func (c *Command) ParseMetadata(fromto string) *Command {
	c.addFlag(&Flag{
		ID:   "parse_metadata",
		Flag: "--parse-metadata",
		Args: []string{fromto},
	})
	return c
}

// UnsetParseMetadata unsets any flags that were previously set by one of:
//   - [Command.ParseMetadata]
func (c *Command) UnsetParseMetadata() *Command {
	c.removeFlagByID("parse_metadata")
	return c
}

// Replace text in a metadata field using the given regex. This option can be used
// multiple times. Supported values of "WHEN" are the same as that of
// --use-postprocessor (default: pre_process)
//
// References:
//   - Modifying Metadata: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#modifying-metadata
//   - Modifying Metadata Examples: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#modifying-metadata-examples
//
// Additional information:
//   - See [Command.UnsetReplaceInMetadata], for unsetting the flag.
//   - ReplaceInMetadata maps to cli flags: --replace-in-metadata=[WHEN:]FIELDS REGEX REPLACE.
//   - From option group: "Post-Processing"
func (c *Command) ReplaceInMetadata(fields, regex, replace string) *Command {
	c.addFlag(&Flag{
		ID:   "parse_metadata",
		Flag: "--replace-in-metadata",
		Args: []string{fields, regex, replace},
	})
	return c
}

// UnsetReplaceInMetadata unsets any flags that were previously set by one of:
//   - [Command.ReplaceInMetadata]
func (c *Command) UnsetReplaceInMetadata() *Command {
	c.removeFlagByID("parse_metadata")
	return c
}

// Write metadata to the video file's xattrs (using dublin core and xdg standards)
//
// Additional information:
//   - See [Command.UnsetXattrs], for unsetting the flag.
//   - Xattrs maps to cli flags: --xattrs/--xattr.
//   - From option group: "Post-Processing"
func (c *Command) Xattrs() *Command {
	c.addFlag(&Flag{
		ID:   "xattrs",
		Flag: "--xattrs",
		Args: nil,
	})
	return c
}

// UnsetXattrs unsets any flags that were previously set by one of:
//   - [Command.Xattrs]
func (c *Command) UnsetXattrs() *Command {
	c.removeFlagByID("xattrs")
	return c
}

// ConcatPlaylistOption are parameter types for [ConcatPlaylist].
type ConcatPlaylistOption string

var (
	ConcatPlaylistNever      ConcatPlaylistOption = "never"
	ConcatPlaylistAlways     ConcatPlaylistOption = "always"
	ConcatPlaylistMultiVideo ConcatPlaylistOption = "multi_video"
)

// Concatenate videos in a playlist. One of "never", "always", or "multi_video"
// (default; only when the videos form a single show). All the video files must
// have same codecs and number of streams to be concatable. The "pl_video:" prefix
// can be used with "--paths" and "--output" to set the output filename for the
// concatenated files. See "OUTPUT TEMPLATE" for details
//
// References:
//   - Output Template: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#output-template
//
// Additional information:
//   - See [Command.UnsetConcatPlaylist], for unsetting the flag.
//   - ConcatPlaylist maps to cli flags: --concat-playlist=POLICY.
//   - From option group: "Post-Processing"
func (c *Command) ConcatPlaylist(policy ConcatPlaylistOption) *Command {
	c.addFlag(&Flag{
		ID:   "concat_playlist",
		Flag: "--concat-playlist",
		Args: []string{string(policy)},
	})
	return c
}

// UnsetConcatPlaylist unsets any flags that were previously set by one of:
//   - [Command.ConcatPlaylist]
func (c *Command) UnsetConcatPlaylist() *Command {
	c.removeFlagByID("concat_playlist")
	return c
}

// FixupOption are parameter types for [Fixup].
type FixupOption string

var (
	FixupNever        FixupOption = "never"
	FixupIgnore       FixupOption = "ignore"
	FixupWarn         FixupOption = "warn"
	FixupDetectOrWarn FixupOption = "detect_or_warn"
	FixupForce        FixupOption = "force"
)

// Automatically correct known faults of the file. One of never (do nothing), warn
// (only emit a warning), detect_or_warn (the default; fix file if we can, warn
// otherwise), force (try fixing even if file already exists)
//
// Additional information:
//   - See [Command.UnsetFixup], for unsetting the flag.
//   - Fixup maps to cli flags: --fixup=POLICY.
//   - From option group: "Post-Processing"
func (c *Command) Fixup(policy FixupOption) *Command {
	c.addFlag(&Flag{
		ID:   "fixup",
		Flag: "--fixup",
		Args: []string{string(policy)},
	})
	return c
}

// UnsetFixup unsets any flags that were previously set by one of:
//   - [Command.Fixup]
func (c *Command) UnsetFixup() *Command {
	c.removeFlagByID("fixup")
	return c
}

// PreferAVConv sets the "prefer-avconv" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPreferAVConv], for unsetting the flag.
//   - PreferAVConv maps to cli flags: --prefer-avconv/--no-prefer-ffmpeg (hidden).
//   - From option group: "Post-Processing"
//
// Deprecated: avconv is not officially supported by yt-dlp.
func (c *Command) PreferAVConv() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_ffmpeg",
		Flag: "--prefer-avconv",
		Args: nil,
	})
	return c
}

// UnsetPreferAVConv unsets any flags that were previously set by one of:
//   - [Command.PreferAVConv]
//
// Deprecated: avconv is not officially supported by yt-dlp.
func (c *Command) UnsetPreferAVConv() *Command {
	c.removeFlagByID("prefer_ffmpeg")
	return c
}

// PreferFFmpeg sets the "prefer-ffmpeg" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetPreferFFmpeg], for unsetting the flag.
//   - PreferFFmpeg maps to cli flags: --prefer-ffmpeg/--no-prefer-avconv (hidden).
//   - From option group: "Post-Processing"
//
// Deprecated: This flag is now default in yt-dlp.
func (c *Command) PreferFFmpeg() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_ffmpeg",
		Flag: "--prefer-ffmpeg",
		Args: nil,
	})
	return c
}

// UnsetPreferFFmpeg unsets any flags that were previously set by one of:
//   - [Command.PreferFFmpeg]
//
// Deprecated: This flag is now default in yt-dlp.
func (c *Command) UnsetPreferFFmpeg() *Command {
	c.removeFlagByID("prefer_ffmpeg")
	return c
}

// Location of the ffmpeg binary; either the path to the binary or its containing
// directory
//
// Additional information:
//   - See [Command.UnsetFFmpegLocation], for unsetting the flag.
//   - FFmpegLocation maps to cli flags: --ffmpeg-location/--avconv-location=PATH.
//   - From option group: "Post-Processing"
func (c *Command) FFmpegLocation(path string) *Command {
	c.addFlag(&Flag{
		ID:   "ffmpeg_location",
		Flag: "--ffmpeg-location",
		Args: []string{path},
	})
	return c
}

// UnsetFFmpegLocation unsets any flags that were previously set by one of:
//   - [Command.FFmpegLocation]
func (c *Command) UnsetFFmpegLocation() *Command {
	c.removeFlagByID("ffmpeg_location")
	return c
}

// Execute a command, optionally prefixed with when to execute it, separated by a
// ":". Supported values of "WHEN" are the same as that of --use-postprocessor
// (default: after_move). Same syntax as the output template can be used to pass
// any field as arguments to the command. If no fields are passed,
// %(filepath,_filename|)q is appended to the end of the command. This option can
// be used multiple times
//
// Additional information:
//   - See [Command.UnsetExec], for unsetting the flag.
//   - Exec maps to cli flags: --exec=[WHEN:]CMD.
//   - From option group: "Post-Processing"
func (c *Command) Exec(cmd string) *Command {
	c.addFlag(&Flag{
		ID:   "exec_cmd",
		Flag: "--exec",
		Args: []string{cmd},
	})
	return c
}

// UnsetExec unsets any flags that were previously set by one of:
//   - [Command.Exec]
//   - [Command.NoExec]
func (c *Command) UnsetExec() *Command {
	c.removeFlagByID("exec_cmd")
	return c
}

// Remove any previously defined --exec
//
// Additional information:
//   - See [Command.UnsetExec], for unsetting the flag.
//   - NoExec maps to cli flags: --no-exec.
//   - From option group: "Post-Processing"
func (c *Command) NoExec() *Command {
	c.addFlag(&Flag{
		ID:   "exec_cmd",
		Flag: "--no-exec",
		Args: nil,
	})
	return c
}

// ExecBeforeDownload sets the "exec-before-download" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetExecBeforeDownload], for unsetting the flag.
//   - ExecBeforeDownload maps to cli flags: --exec-before-download=CMD (hidden).
//   - From option group: "Post-Processing"
func (c *Command) ExecBeforeDownload(cmd string) *Command {
	c.addFlag(&Flag{
		ID:   "exec_before_dl_cmd",
		Flag: "--exec-before-download",
		Args: []string{cmd},
	})
	return c
}

// UnsetExecBeforeDownload unsets any flags that were previously set by one of:
//   - [Command.ExecBeforeDownload]
//   - [Command.NoExecBeforeDownload]
func (c *Command) UnsetExecBeforeDownload() *Command {
	c.removeFlagByID("exec_before_dl_cmd")
	return c
}

// NoExecBeforeDownload sets the "no-exec-before-download" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetExecBeforeDownload], for unsetting the flag.
//   - NoExecBeforeDownload maps to cli flags: --no-exec-before-download (hidden).
//   - From option group: "Post-Processing"
func (c *Command) NoExecBeforeDownload() *Command {
	c.addFlag(&Flag{
		ID:   "exec_before_dl_cmd",
		Flag: "--no-exec-before-download",
		Args: nil,
	})
	return c
}

// Convert the subtitles to another format (currently supported: ass, lrc, srt,
// vtt)
//
// Additional information:
//   - See [Command.UnsetConvertSubs], for unsetting the flag.
//   - ConvertSubs maps to cli flags: --convert-subs/--convert-sub/--convert-subtitles=FORMAT.
//   - From option group: "Post-Processing"
func (c *Command) ConvertSubs(format string) *Command {
	c.addFlag(&Flag{
		ID:   "convertsubtitles",
		Flag: "--convert-subs",
		Args: []string{format},
	})
	return c
}

// UnsetConvertSubs unsets any flags that were previously set by one of:
//   - [Command.ConvertSubs]
func (c *Command) UnsetConvertSubs() *Command {
	c.removeFlagByID("convertsubtitles")
	return c
}

// Convert the thumbnails to another format (currently supported: jpg, png, webp).
// You can specify multiple rules using similar syntax as --remux-video
//
// Additional information:
//   - See [Command.UnsetConvertThumbnails], for unsetting the flag.
//   - ConvertThumbnails maps to cli flags: --convert-thumbnails=FORMAT.
//   - From option group: "Post-Processing"
func (c *Command) ConvertThumbnails(format string) *Command {
	c.addFlag(&Flag{
		ID:   "convertthumbnails",
		Flag: "--convert-thumbnails",
		Args: []string{format},
	})
	return c
}

// UnsetConvertThumbnails unsets any flags that were previously set by one of:
//   - [Command.ConvertThumbnails]
func (c *Command) UnsetConvertThumbnails() *Command {
	c.removeFlagByID("convertthumbnails")
	return c
}

// Split video into multiple files based on internal chapters. The "chapter:"
// prefix can be used with "--paths" and "--output" to set the output filename for
// the split files. See "OUTPUT TEMPLATE" for details
//
// References:
//   - Output Template: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#output-template
//
// Additional information:
//   - See [Command.UnsetSplitChapters], for unsetting the flag.
//   - SplitChapters maps to cli flags: --split-chapters/--split-tracks.
//   - From option group: "Post-Processing"
func (c *Command) SplitChapters() *Command {
	c.addFlag(&Flag{
		ID:   "split_chapters",
		Flag: "--split-chapters",
		Args: nil,
	})
	return c
}

// UnsetSplitChapters unsets any flags that were previously set by one of:
//   - [Command.SplitChapters]
//   - [Command.NoSplitChapters]
func (c *Command) UnsetSplitChapters() *Command {
	c.removeFlagByID("split_chapters")
	return c
}

// Do not split video based on chapters (default)
//
// Additional information:
//   - See [Command.UnsetSplitChapters], for unsetting the flag.
//   - NoSplitChapters maps to cli flags: --no-split-chapters/--no-split-tracks.
//   - From option group: "Post-Processing"
func (c *Command) NoSplitChapters() *Command {
	c.addFlag(&Flag{
		ID:   "split_chapters",
		Flag: "--no-split-chapters",
		Args: nil,
	})
	return c
}

// Remove chapters whose title matches the given regular expression. The syntax is
// the same as --download-sections. This option can be used multiple times
//
// Additional information:
//   - See [Command.UnsetRemoveChapters], for unsetting the flag.
//   - RemoveChapters maps to cli flags: --remove-chapters=REGEX.
//   - From option group: "Post-Processing"
func (c *Command) RemoveChapters(regex string) *Command {
	c.addFlag(&Flag{
		ID:   "remove_chapters",
		Flag: "--remove-chapters",
		Args: []string{regex},
	})
	return c
}

// UnsetRemoveChapters unsets any flags that were previously set by one of:
//   - [Command.RemoveChapters]
//   - [Command.NoRemoveChapters]
func (c *Command) UnsetRemoveChapters() *Command {
	c.removeFlagByID("remove_chapters")
	return c
}

// Do not remove any chapters from the file (default)
//
// Additional information:
//   - See [Command.UnsetRemoveChapters], for unsetting the flag.
//   - NoRemoveChapters maps to cli flags: --no-remove-chapters.
//   - From option group: "Post-Processing"
func (c *Command) NoRemoveChapters() *Command {
	c.addFlag(&Flag{
		ID:   "remove_chapters",
		Flag: "--no-remove-chapters",
		Args: nil,
	})
	return c
}

// Force keyframes at cuts when downloading/splitting/removing sections. This is
// slow due to needing a re-encode, but the resulting video may have fewer
// artifacts around the cuts
//
// Additional information:
//   - See [Command.UnsetForceKeyframesAtCuts], for unsetting the flag.
//   - ForceKeyframesAtCuts maps to cli flags: --force-keyframes-at-cuts.
//   - From option group: "Post-Processing"
func (c *Command) ForceKeyframesAtCuts() *Command {
	c.addFlag(&Flag{
		ID:   "force_keyframes_at_cuts",
		Flag: "--force-keyframes-at-cuts",
		Args: nil,
	})
	return c
}

// UnsetForceKeyframesAtCuts unsets any flags that were previously set by one of:
//   - [Command.ForceKeyframesAtCuts]
//   - [Command.NoForceKeyframesAtCuts]
func (c *Command) UnsetForceKeyframesAtCuts() *Command {
	c.removeFlagByID("force_keyframes_at_cuts")
	return c
}

// Do not force keyframes around the chapters when cutting/splitting (default)
//
// Additional information:
//   - See [Command.UnsetForceKeyframesAtCuts], for unsetting the flag.
//   - NoForceKeyframesAtCuts maps to cli flags: --no-force-keyframes-at-cuts.
//   - From option group: "Post-Processing"
func (c *Command) NoForceKeyframesAtCuts() *Command {
	c.addFlag(&Flag{
		ID:   "force_keyframes_at_cuts",
		Flag: "--no-force-keyframes-at-cuts",
		Args: nil,
	})
	return c
}

// The (case sensitive) name of plugin postprocessors to be enabled, and
// (optionally) arguments to be passed to it, separated by a colon ":". ARGS are a
// semicolon ";" delimited list of NAME=VALUE. The "when" argument determines when
// the postprocessor is invoked. It can be one of "pre_process" (after video
// extraction), "after_filter" (after video passes filter), "video" (after
// --format; before --print/--output), "before_dl" (before each video download),
// "post_process" (after each video download; default), "after_move" (after moving
// video file to its final locations), "after_video" (after downloading and
// processing all formats of a video), or "playlist" (at end of playlist). This
// option can be used multiple times to add different postprocessors
//
// Additional information:
//   - See [Command.UnsetUsePostProcessor], for unsetting the flag.
//   - UsePostProcessor maps to cli flags: --use-postprocessor=NAME[:ARGS].
//   - From option group: "Post-Processing"
func (c *Command) UsePostProcessor(name string) *Command {
	c.addFlag(&Flag{
		ID:   "add_postprocessors",
		Flag: "--use-postprocessor",
		Args: []string{name},
	})
	return c
}

// UnsetUsePostProcessor unsets any flags that were previously set by one of:
//   - [Command.UsePostProcessor]
func (c *Command) UnsetUsePostProcessor() *Command {
	c.removeFlagByID("add_postprocessors")
	return c
}

// SponsorBlock categories to create chapters for, separated by commas. Available
// categories are sponsor, intro, outro, selfpromo, preview, filler, interaction,
// music_offtopic, poi_highlight, chapter, all and default (=all). You can prefix
// the category with a "-" to exclude it. See [1] for description of the
// categories. E.g. --sponsorblock-mark all,-preview [1]
// https://wiki.sponsor.ajay.app/w/Segment_Categories
//
// Additional information:
//   - See [Command.UnsetSponsorblockMark], for unsetting the flag.
//   - SponsorblockMark maps to cli flags: --sponsorblock-mark=CATS.
//   - From option group: "SponsorBlock"
func (c *Command) SponsorblockMark(cats string) *Command {
	c.addFlag(&Flag{
		ID:   "sponsorblock_mark",
		Flag: "--sponsorblock-mark",
		Args: []string{cats},
	})
	return c
}

// UnsetSponsorblockMark unsets any flags that were previously set by one of:
//   - [Command.SponsorblockMark]
func (c *Command) UnsetSponsorblockMark() *Command {
	c.removeFlagByID("sponsorblock_mark")
	return c
}

// SponsorBlock categories to be removed from the video file, separated by commas.
// If a category is present in both mark and remove, remove takes precedence. The
// syntax and available categories are the same as for --sponsorblock-mark except
// that "default" refers to "all,-filler" and poi_highlight, chapter are not
// available
//
// Additional information:
//   - See [Command.UnsetSponsorblockRemove], for unsetting the flag.
//   - SponsorblockRemove maps to cli flags: --sponsorblock-remove=CATS.
//   - From option group: "SponsorBlock"
func (c *Command) SponsorblockRemove(cats string) *Command {
	c.addFlag(&Flag{
		ID:   "sponsorblock_remove",
		Flag: "--sponsorblock-remove",
		Args: []string{cats},
	})
	return c
}

// UnsetSponsorblockRemove unsets any flags that were previously set by one of:
//   - [Command.SponsorblockRemove]
func (c *Command) UnsetSponsorblockRemove() *Command {
	c.removeFlagByID("sponsorblock_remove")
	return c
}

// An output template for the title of the SponsorBlock chapters created by
// --sponsorblock-mark. The only available fields are start_time, end_time,
// category, categories, name, category_names. Defaults to "[SponsorBlock]:
// %(category_names)l"
//
// Additional information:
//   - See [Command.UnsetSponsorblockChapterTitle], for unsetting the flag.
//   - SponsorblockChapterTitle maps to cli flags: --sponsorblock-chapter-title=TEMPLATE.
//   - From option group: "SponsorBlock"
func (c *Command) SponsorblockChapterTitle(template string) *Command {
	c.addFlag(&Flag{
		ID:   "sponsorblock_chapter_title",
		Flag: "--sponsorblock-chapter-title",
		Args: []string{template},
	})
	return c
}

// UnsetSponsorblockChapterTitle unsets any flags that were previously set by one of:
//   - [Command.SponsorblockChapterTitle]
func (c *Command) UnsetSponsorblockChapterTitle() *Command {
	c.removeFlagByID("sponsorblock_chapter_title")
	return c
}

// Disable both --sponsorblock-mark and --sponsorblock-remove
//
// Additional information:
//   - See [Command.UnsetSponsorblock], for unsetting the flag.
//   - NoSponsorblock maps to cli flags: --no-sponsorblock.
//   - From option group: "SponsorBlock"
func (c *Command) NoSponsorblock() *Command {
	c.addFlag(&Flag{
		ID:   "no_sponsorblock",
		Flag: "--no-sponsorblock",
		Args: nil,
	})
	return c
}

// UnsetSponsorblock unsets any flags that were previously set by one of:
//   - [Command.NoSponsorblock]
func (c *Command) UnsetSponsorblock() *Command {
	c.removeFlagByID("no_sponsorblock")
	return c
}

// SponsorBlock API location, defaults to https://sponsor.ajay.app
//
// Additional information:
//   - See [Command.UnsetSponsorblockAPI], for unsetting the flag.
//   - SponsorblockAPI maps to cli flags: --sponsorblock-api=URL.
//   - From option group: "SponsorBlock"
func (c *Command) SponsorblockAPI(url string) *Command {
	c.addFlag(&Flag{
		ID:   "sponsorblock_api",
		Flag: "--sponsorblock-api",
		Args: []string{url},
	})
	return c
}

// UnsetSponsorblockAPI unsets any flags that were previously set by one of:
//   - [Command.SponsorblockAPI]
func (c *Command) UnsetSponsorblockAPI() *Command {
	c.removeFlagByID("sponsorblock_api")
	return c
}

// Sponskrub sets the "sponskrub" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrub], for unsetting the flag.
//   - Sponskrub maps to cli flags: --sponskrub (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: Use [Command.SponsorblockMark] with "all" as an argument.
func (c *Command) Sponskrub() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub",
		Flag: "--sponskrub",
		Args: nil,
	})
	return c
}

// UnsetSponskrub unsets any flags that were previously set by one of:
//   - [Command.Sponskrub]
//   - [Command.NoSponskrub]
//
// Deprecated: Use [Command.SponsorblockMark] with "all" as an argument.
func (c *Command) UnsetSponskrub() *Command {
	c.removeFlagByID("sponskrub")
	return c
}

// NoSponskrub sets the "no-sponskrub" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrub], for unsetting the flag.
//   - NoSponskrub maps to cli flags: --no-sponskrub (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: Use [Command.NoSponsorblock] instead.
func (c *Command) NoSponskrub() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub",
		Flag: "--no-sponskrub",
		Args: nil,
	})
	return c
}

// SponskrubCut sets the "sponskrub-cut" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubCut], for unsetting the flag.
//   - SponskrubCut maps to cli flags: --sponskrub-cut (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: Use [Command.SponsorblockRemove] with "all" as an argument.
func (c *Command) SponskrubCut() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_cut",
		Flag: "--sponskrub-cut",
		Args: nil,
	})
	return c
}

// UnsetSponskrubCut unsets any flags that were previously set by one of:
//   - [Command.SponskrubCut]
//   - [Command.NoSponskrubCut]
//
// Deprecated: Use [Command.SponsorblockRemove] with "all" as an argument.
func (c *Command) UnsetSponskrubCut() *Command {
	c.removeFlagByID("sponskrub_cut")
	return c
}

// NoSponskrubCut sets the "no-sponskrub-cut" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubCut], for unsetting the flag.
//   - NoSponskrubCut maps to cli flags: --no-sponskrub-cut (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: Use [Command.SponsorblockRemove] with "-all" as an argument.
func (c *Command) NoSponskrubCut() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_cut",
		Flag: "--no-sponskrub-cut",
		Args: nil,
	})
	return c
}

// SponskrubForce sets the "sponskrub-force" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubForce], for unsetting the flag.
//   - SponskrubForce maps to cli flags: --sponskrub-force (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: No longer applicable.
func (c *Command) SponskrubForce() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_force",
		Flag: "--sponskrub-force",
		Args: nil,
	})
	return c
}

// UnsetSponskrubForce unsets any flags that were previously set by one of:
//   - [Command.SponskrubForce]
//   - [Command.NoSponskrubForce]
//
// Deprecated: No longer applicable.
func (c *Command) UnsetSponskrubForce() *Command {
	c.removeFlagByID("sponskrub_force")
	return c
}

// NoSponskrubForce sets the "no-sponskrub-force" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubForce], for unsetting the flag.
//   - NoSponskrubForce maps to cli flags: --no-sponskrub-force (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: No longer applicable.
func (c *Command) NoSponskrubForce() *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_force",
		Flag: "--no-sponskrub-force",
		Args: nil,
	})
	return c
}

// SponskrubLocation sets the "sponskrub-location" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubLocation], for unsetting the flag.
//   - SponskrubLocation maps to cli flags: --sponskrub-location=PATH (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: No longer applicable.
func (c *Command) SponskrubLocation(path string) *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_path",
		Flag: "--sponskrub-location",
		Args: []string{path},
	})
	return c
}

// UnsetSponskrubLocation unsets any flags that were previously set by one of:
//   - [Command.SponskrubLocation]
//
// Deprecated: No longer applicable.
func (c *Command) UnsetSponskrubLocation() *Command {
	c.removeFlagByID("sponskrub_path")
	return c
}

// SponskrubArgs sets the "sponskrub-args" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetSponskrubArgs], for unsetting the flag.
//   - SponskrubArgs maps to cli flags: --sponskrub-args=ARGS (hidden).
//   - From option group: "SponsorBlock"
//
// Deprecated: No longer applicable.
func (c *Command) SponskrubArgs(args string) *Command {
	c.addFlag(&Flag{
		ID:   "sponskrub_args",
		Flag: "--sponskrub-args",
		Args: []string{args},
	})
	return c
}

// UnsetSponskrubArgs unsets any flags that were previously set by one of:
//   - [Command.SponskrubArgs]
//
// Deprecated: No longer applicable.
func (c *Command) UnsetSponskrubArgs() *Command {
	c.removeFlagByID("sponskrub_args")
	return c
}

// Number of retries for known extractor errors (default is 3), or "infinite"
//
// Additional information:
//   - See [Command.UnsetExtractorRetries], for unsetting the flag.
//   - ExtractorRetries maps to cli flags: --extractor-retries=RETRIES.
//   - From option group: "Extractor"
func (c *Command) ExtractorRetries(retries string) *Command {
	c.addFlag(&Flag{
		ID:   "extractor_retries",
		Flag: "--extractor-retries",
		Args: []string{retries},
	})
	return c
}

// UnsetExtractorRetries unsets any flags that were previously set by one of:
//   - [Command.ExtractorRetries]
func (c *Command) UnsetExtractorRetries() *Command {
	c.removeFlagByID("extractor_retries")
	return c
}

// Process dynamic DASH manifests (default)
//
// Additional information:
//   - See [Command.UnsetAllowDynamicMPD], for unsetting the flag.
//   - AllowDynamicMPD maps to cli flags: --allow-dynamic-mpd/--no-ignore-dynamic-mpd.
//   - From option group: "Extractor"
func (c *Command) AllowDynamicMPD() *Command {
	c.addFlag(&Flag{
		ID:   "dynamic_mpd",
		Flag: "--allow-dynamic-mpd",
		Args: nil,
	})
	return c
}

// UnsetAllowDynamicMPD unsets any flags that were previously set by one of:
//   - [Command.AllowDynamicMPD]
func (c *Command) UnsetAllowDynamicMPD() *Command {
	c.removeFlagByID("dynamic_mpd")
	return c
}

// Do not process dynamic DASH manifests
//
// Additional information:
//   - See [Command.UnsetIgnoreDynamicMPD], for unsetting the flag.
//   - IgnoreDynamicMPD maps to cli flags: --ignore-dynamic-mpd/--no-allow-dynamic-mpd.
//   - From option group: "Extractor"
func (c *Command) IgnoreDynamicMPD() *Command {
	c.addFlag(&Flag{
		ID:   "dynamic_mpd",
		Flag: "--ignore-dynamic-mpd",
		Args: nil,
	})
	return c
}

// UnsetIgnoreDynamicMPD unsets any flags that were previously set by one of:
//   - [Command.IgnoreDynamicMPD]
func (c *Command) UnsetIgnoreDynamicMPD() *Command {
	c.removeFlagByID("dynamic_mpd")
	return c
}

// Split HLS playlists to different formats at discontinuities such as ad breaks
//
// Additional information:
//   - See [Command.UnsetHLSSplitDiscontinuity], for unsetting the flag.
//   - HLSSplitDiscontinuity maps to cli flags: --hls-split-discontinuity.
//   - From option group: "Extractor"
func (c *Command) HLSSplitDiscontinuity() *Command {
	c.addFlag(&Flag{
		ID:   "hls_split_discontinuity",
		Flag: "--hls-split-discontinuity",
		Args: nil,
	})
	return c
}

// UnsetHLSSplitDiscontinuity unsets any flags that were previously set by one of:
//   - [Command.HLSSplitDiscontinuity]
//   - [Command.NoHLSSplitDiscontinuity]
func (c *Command) UnsetHLSSplitDiscontinuity() *Command {
	c.removeFlagByID("hls_split_discontinuity")
	return c
}

// Do not split HLS playlists to different formats at discontinuities such as ad
// breaks (default)
//
// Additional information:
//   - See [Command.UnsetHLSSplitDiscontinuity], for unsetting the flag.
//   - NoHLSSplitDiscontinuity maps to cli flags: --no-hls-split-discontinuity.
//   - From option group: "Extractor"
func (c *Command) NoHLSSplitDiscontinuity() *Command {
	c.addFlag(&Flag{
		ID:   "hls_split_discontinuity",
		Flag: "--no-hls-split-discontinuity",
		Args: nil,
	})
	return c
}

// Pass ARGS arguments to the IE_KEY extractor. See "EXTRACTOR ARGUMENTS" for
// details. You can use this option multiple times to give arguments for different
// extractors
//
// References:
//   - Extractor Arguments: https://github.com/yt-dlp/yt-dlp/blob/2024.07.25/README.md#extractor-arguments
//
// Additional information:
//   - See [Command.UnsetExtractorArgs], for unsetting the flag.
//   - ExtractorArgs maps to cli flags: --extractor-args=IE_KEY:ARGS.
//   - From option group: "Extractor"
func (c *Command) ExtractorArgs(ieKeyargs string) *Command {
	c.addFlag(&Flag{
		ID:   "extractor_args",
		Flag: "--extractor-args",
		Args: []string{ieKeyargs},
	})
	return c
}

// UnsetExtractorArgs unsets any flags that were previously set by one of:
//   - [Command.ExtractorArgs]
func (c *Command) UnsetExtractorArgs() *Command {
	c.removeFlagByID("extractor_args")
	return c
}

// YoutubeIncludeDashManifest sets the "youtube-include-dash-manifest" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetYoutubeIncludeDashManifest], for unsetting the flag.
//   - YoutubeIncludeDashManifest maps to cli flags: --youtube-include-dash-manifest/--no-youtube-skip-dash-manifest (hidden).
//   - From option group: "Extractor"
func (c *Command) YoutubeIncludeDashManifest() *Command {
	c.addFlag(&Flag{
		ID:   "youtube_include_dash_manifest",
		Flag: "--youtube-include-dash-manifest",
		Args: nil,
	})
	return c
}

// UnsetYoutubeIncludeDashManifest unsets any flags that were previously set by one of:
//   - [Command.YoutubeIncludeDashManifest]
func (c *Command) UnsetYoutubeIncludeDashManifest() *Command {
	c.removeFlagByID("youtube_include_dash_manifest")
	return c
}

// YoutubeSkipDashManifest sets the "youtube-skip-dash-manifest" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetYoutubeSkipDashManifest], for unsetting the flag.
//   - YoutubeSkipDashManifest maps to cli flags: --youtube-skip-dash-manifest/--no-youtube-include-dash-manifest (hidden).
//   - From option group: "Extractor"
func (c *Command) YoutubeSkipDashManifest() *Command {
	c.addFlag(&Flag{
		ID:   "youtube_include_dash_manifest",
		Flag: "--youtube-skip-dash-manifest",
		Args: nil,
	})
	return c
}

// UnsetYoutubeSkipDashManifest unsets any flags that were previously set by one of:
//   - [Command.YoutubeSkipDashManifest]
func (c *Command) UnsetYoutubeSkipDashManifest() *Command {
	c.removeFlagByID("youtube_include_dash_manifest")
	return c
}

// YoutubeIncludeHLSManifest sets the "youtube-include-hls-manifest" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetYoutubeIncludeHLSManifest], for unsetting the flag.
//   - YoutubeIncludeHLSManifest maps to cli flags: --youtube-include-hls-manifest/--no-youtube-skip-hls-manifest (hidden).
//   - From option group: "Extractor"
func (c *Command) YoutubeIncludeHLSManifest() *Command {
	c.addFlag(&Flag{
		ID:   "youtube_include_hls_manifest",
		Flag: "--youtube-include-hls-manifest",
		Args: nil,
	})
	return c
}

// UnsetYoutubeIncludeHLSManifest unsets any flags that were previously set by one of:
//   - [Command.YoutubeIncludeHLSManifest]
func (c *Command) UnsetYoutubeIncludeHLSManifest() *Command {
	c.removeFlagByID("youtube_include_hls_manifest")
	return c
}

// YoutubeSkipHLSManifest sets the "youtube-skip-hls-manifest" flag (no description specified).
//
// Additional information:
//   - See [Command.UnsetYoutubeSkipHLSManifest], for unsetting the flag.
//   - YoutubeSkipHLSManifest maps to cli flags: --youtube-skip-hls-manifest/--no-youtube-include-hls-manifest (hidden).
//   - From option group: "Extractor"
func (c *Command) YoutubeSkipHLSManifest() *Command {
	c.addFlag(&Flag{
		ID:   "youtube_include_hls_manifest",
		Flag: "--youtube-skip-hls-manifest",
		Args: nil,
	})
	return c
}

// UnsetYoutubeSkipHLSManifest unsets any flags that were previously set by one of:
//   - [Command.YoutubeSkipHLSManifest]
func (c *Command) UnsetYoutubeSkipHLSManifest() *Command {
	c.removeFlagByID("youtube_include_hls_manifest")
	return c
}
